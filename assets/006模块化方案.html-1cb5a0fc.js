import{_ as s,o as n,c as a,e}from"./app-72993491.js";const p={},t=e(`<h1 id="模块化方案" tabindex="-1"><a class="header-anchor" href="#模块化方案" aria-hidden="true">#</a> 模块化方案</h1><h2 id="cjs" tabindex="-1"><a class="header-anchor" href="#cjs" aria-hidden="true">#</a> cjs</h2><p>cjs是nodejs的模块规范，通过require和exports进行导入导出，module.exports属于commonjs2。webpack也对cjs模块解析，所以cjs可以在nodejs和webpack下运行。现在不太流行</p><p>在 CJS 中，导入导出有一种方式:</p><div class="language-cjs line-numbers-mode" data-ext="cjs"><pre class="language-cjs"><code>module.exports = sum;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>exports 仅仅是 module.exports 的引用而已</p><div class="language-cjs line-numbers-mode" data-ext="cjs"><pre class="language-cjs"><code>// 实际上的 exports
exports = module.exports;
 
// 以下两个是等价的
exports.a = 3;
module.exports.a = 3;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="esm" tabindex="-1"><a class="header-anchor" href="#esm" aria-hidden="true">#</a> esm</h2><p>tc39对于ESMAScript的模块化规范，新版本node和现代浏览器都支持，也是未来趋势。使用import/export导入导出。因为esm是静态导入，所以可以在编译阶段tree shaking</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>cjs模块输出的一个值的拷贝，esm输出的是值的引用<br> cjs模块运行时加载，esm编译时加载</p></div><p>在 ESM 中，导入导出有两种方式:</p><p>具名导出/导入: Named Import/Export 默认导出/导入: Default Import/Export</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;sum&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> sum
<span class="token keyword">import</span> sum <span class="token keyword">from</span> <span class="token string">&#39;sum&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="umd" tabindex="-1"><a class="header-anchor" href="#umd" aria-hidden="true">#</a> umd</h2><p>一种兼容cjs和amd的模块，可在node/webpack中用require使用，也可一直接用script引入</p><h2 id="commonjstoesm" tabindex="-1"><a class="header-anchor" href="#commonjstoesm" aria-hidden="true">#</a> CommonJSToESM</h2><p>当 exports 转化时，既要转化为 export {}，又要转化为 export default {}</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Input:  index.cjs</span>
exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
 
<span class="token comment">// Output: index.mjs</span>
<span class="token comment">// 此处既要转化为默认导出，又要转化为具名导出！</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 module.exports，我们可以遍历其中的 key (通过 AST)，将 key 转化为 Named Export，将 module.exports 转化为 Default Export</p><p>如果 module.exports 导出的是函数如何处理呢，特别是 exports 与 module.exports 的程序逻辑混合在一起？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Input: index.cjs</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>
exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">4</span>
 
<span class="token comment">// Output: index.mjs</span>
<span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
sum<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>
sum<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">=</span> sum
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以这么处理，将 module.exports 与 exports 的代码使用函数包裹起来，此时我们无需关心其中的逻辑细节。这个操作也正是webpack做的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> esm$1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>esm$1<span class="token punctuation">,</span> esm$1<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">var</span> esm <span class="token operator">=</span> esm$1<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token punctuation">{</span> esm <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一些复杂的转化-cjs和esm使用差异" tabindex="-1"><a class="header-anchor" href="#一些复杂的转化-cjs和esm使用差异" aria-hidden="true">#</a> 一些复杂的转化 cjs和esm使用差异</h2><h3 id="cjs-和-esm差异" tabindex="-1"><a class="header-anchor" href="#cjs-和-esm差异" aria-hidden="true">#</a> cjs 和 esm差异</h3><ol><li>require import</li><li>module export</li><li>__dirname</li><li>__filename</li><li>exports export</li></ol><h3 id="es实现-dirname" tabindex="-1"><a class="header-anchor" href="#es实现-dirname" aria-hidden="true">#</a> es实现 __dirname</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fileUrlToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:url&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> dirname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:path&#39;</span>
<span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">fileUrlPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es实现-filename" tabindex="-1"><a class="header-anchor" href="#es实现-filename" aria-hidden="true">#</a> es实现 __filename</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fileUrlToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:url&#39;</span>
<span class="token keyword">const</span> __filename <span class="token operator">=</span> <span class="token function">fileUrlPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊" tabindex="-1"><a class="header-anchor" href="#特殊" aria-hidden="true">#</a> 特殊</h3><div class="language-cjs line-numbers-mode" data-ext="cjs"><pre class="language-cjs"><code>// input: index.cjs
exports.sum = 0;
Promise.resolve().then(() =&gt; {
  exports.sum = 100;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// output: index.mjs</span>
<span class="token keyword">const</span> _default <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>_default<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  sum <span class="token operator">=</span> _default<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> _default<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),o=[t];function c(i,l){return n(),a("div",null,o)}const u=s(p,[["render",c],["__file","006模块化方案.html.vue"]]);export{u as default};
