import{_ as n,o as s,c as a,e as t}from"./app-72993491.js";const e={},p=t(`<h1 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h1><ol><li>装饰器会参与到最终js运行</li><li>装饰器的运行时机，读到这个类的时候就会立马被运行</li><li>开启ts相关配置，可以将ts类型约束作为元数据放入运行时态中，ts将有机会在运行时态中进行类型约束</li></ol><h2 id="类装饰器" tabindex="-1"><a class="header-anchor" href="#类装饰器" aria-hidden="true">#</a> 类装饰器</h2><p>类装饰器接受一个参数，这个参数就是类本身</p><p>允许返回值，同时类装饰器有两种返回值</p><ol><li>void: 当没有返回值时候，返回类本身</li><li>返回新的类，代替</li></ol><h2 id="成员装饰器" tabindex="-1"><a class="header-anchor" href="#成员装饰器" aria-hidden="true">#</a> 成员装饰器</h2><p>成员装饰器接收三个参数</p><ol><li>target 静态成员，返回类本身，实例成员，返回prototype</li><li>key 代表当前修饰的键值</li><li>descriptor 该key的属性描述符，可读可写，成员装饰器不能有返回值</li></ol><p>不能有返回值</p><h2 id="参数装饰器" tabindex="-1"><a class="header-anchor" href="#参数装饰器" aria-hidden="true">#</a> 参数装饰器</h2><p>参数装饰器接收三个参数</p><ol><li>target 静态成员，返回类本身，实例成员，返回prototype</li><li>methodName 代表当前方法名称</li><li>index 被修饰参数在函数参数列表中的索引</li></ol><p>不能有返回值</p><h2 id="用例" tabindex="-1"><a class="header-anchor" href="#用例" aria-hidden="true">#</a> 用例</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> reportToServer<span class="token operator">:</span> <span class="token function-variable function">MethodDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reportToServer<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> paramsDecorator<span class="token operator">:</span> <span class="token function-variable function">ParameterDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;params:&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> logger<span class="token operator">:</span> <span class="token function-variable function">MethodDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reportToServer<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> TestDecorator<span class="token operator">:</span> <span class="token function-variable function">ClassDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">TestDecorator</span></span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">logger</span></span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">reportToServer</span></span>
    <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">paramsDecorator</span></span> userId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            userId<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

service<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","012装饰器.html.vue"]]);export{u as default};
