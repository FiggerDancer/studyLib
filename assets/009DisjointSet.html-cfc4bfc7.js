import{_ as a,o as p,c as t,e as s,b as n,d as e}from"./app-72993491.js";const o={},c=s(`<h1 id="并查集" tabindex="-1"><a class="header-anchor" href="#并查集" aria-hidden="true">#</a> 并查集</h1><p>使isSameSet和union两个api的执行速度变快，链表，union快，但是isSameSet慢，Set中isSameSet快，但是union慢</p><p>isSameSet 是否是同一集合 union 将两个集合合并</p><p>如何去做呢？ 将每个元素进行包装一下，包装完成后，生成哈希表，用来维护，自己对应的包装元素，建立一个父映射表，自己指向自己，一个size表，每个元素初始值为1。当调用isSameSet时，不停的往上找自己的上级元素直至找到最顶级元素，判断两元素是否相同，若相同说明属于同一集合，同时为了防止链路过长，在这个过程中将元素的父元素都指向顶级元素，进行扁平化。当调用union时，将小的集合合并到小的集合，然后修改big的size，并移除小的size</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">DisjointSet</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elementMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 父元素的集合</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fatherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 代表元素所在的集合有几个点</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sizeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 初始化时要求用户将样本全给好</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> value <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
                value
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> element<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fatherMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> element<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>sizeMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">findHead</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>element <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fatherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
            element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fatherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fatherMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> element
    <span class="token punctuation">}</span>
    <span class="token function">union</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> aF <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findHead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> bF <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findHead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>aF <span class="token operator">!==</span> bF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> big <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aF<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bF<span class="token punctuation">)</span> <span class="token operator">?</span> aF <span class="token operator">:</span> bF
                <span class="token keyword">const</span> small <span class="token operator">=</span> big <span class="token operator">===</span> aF <span class="token operator">?</span> bF <span class="token operator">:</span> aF<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>fatherMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>small<span class="token punctuation">,</span> big<span class="token punctuation">)</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>sizeMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>big<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aF<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bF<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>sizeMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">isSameSet</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findHead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findHead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="岛问题" tabindex="-1"><a class="header-anchor" href="#岛问题" aria-hidden="true">#</a> 岛问题</h2><p>leetCode 200</p><p>【题目】<br> 一个矩阵中只有0和1两种值，每个位置都可以和自己的上、下、左、右四个位置相连，如果有一片1连在一起，这个部分叫做一个岛，求一个矩阵中有多少个岛?<br> 【举例】<br> 001010<br> 111010<br> 100100<br> 000000<br> 这个矩阵中有三个岛</p><p>通过感染过程来解决问题,当碰到一个1后，将其所有连着的位置全部置为2</p>`,9),l=n("p",null,[e("时间复杂度为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,"∗"),n("mi",null,"m"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n*m)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mclose"},")")])])])],-1),i=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">infect</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> m <span class="token operator">||</span> i <span class="token operator">&gt;=</span> n <span class="token operator">||</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
    <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">countIslands</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token operator">++</span>
                <span class="token function">infect</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【进阶】" tabindex="-1"><a class="header-anchor" href="#【进阶】" aria-hidden="true">#</a> 【进阶】</h3><p>如何设计一个并行算法解决这个问题</p><p>将整个矩阵，分给多个CPU，以两个为例，左边一个，然后获取每个CPU中存在的岛，使用这些岛作为参数初始化一个并查集，然后判断有边界的岛是否和另一个CPU中的岛边界是否重合，合并两个岛的集合，重复这个步骤直至遍历完所有的CPU，然后计算集合的个数</p>`,4),u=[c,l,i];function k(r,d){return p(),t("div",null,u)}const v=a(o,[["render",k],["__file","009DisjointSet.html.vue"]]);export{v as default};
