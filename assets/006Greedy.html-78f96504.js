import{_ as n,o as s,c as a,e as p}from"./app-72993491.js";const t={},e=p(`<h1 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h1><p>在某一个标准下，忧先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案的算法,叫作贪心算法。<br> 也就是说，不从整体最优上加以考虑，所做出的是在某种意义上的局部最优解。<br> 局部最优-?-〉整体最忧</p><h2 id="贪心算法的在笔试时的解题套路" tabindex="-1"><a class="header-anchor" href="#贪心算法的在笔试时的解题套路" aria-hidden="true">#</a> 贪心算法的在笔试时的解题套路</h2><ol><li>实现一个不依靠贪心策略的解法x，可以用最暴力的尝试</li><li>脑补出贪心策略A、贪心策略B、贪心策略C...</li><li>用解法X和对数器，去验证每一个贪心策略，用实验的方式得知哪个贪心策略正确</li><li>不要去纠结贪心策略的证明</li></ol><h2 id="从头到尾展示最正统的贪心策略求解过程" tabindex="-1"><a class="header-anchor" href="#从头到尾展示最正统的贪心策略求解过程" aria-hidden="true">#</a> 从头到尾展示最正统的贪心策略求解过程</h2><p>给定一个字符串类型的数组strs，找到一种拼接方式，使得把所有字符串拼起来之后形成的字符串具有最小的字典序。<br> 证明贪心策略可能是件非常腌心的事情。平时当然推荐你搞清楚所有的来龙去脉，但是笔试时用对数器的方式!</p><h2 id="贪心策略在实现时-经常使用到的技巧" tabindex="-1"><a class="header-anchor" href="#贪心策略在实现时-经常使用到的技巧" aria-hidden="true">#</a> 贪心策略在实现时，经常使用到的技巧</h2><ol><li>根据某标准建立一个比较器来排序</li><li>根据某标准建立一个比较器来组成堆</li></ol><h2 id="例题" tabindex="-1"><a class="header-anchor" href="#例题" aria-hidden="true">#</a> 例题</h2><h3 id="问题1" tabindex="-1"><a class="header-anchor" href="#问题1" aria-hidden="true">#</a> 问题1</h3><p>一块金条切成两半，是需要花费和长度数值一样的铜板的。比如长度为20的金条，不管切成长度多大的两半，都要花费20个铜板。<br> 一群人想整分整块金条，怎么分最省铜板?<br> 例如,给定数组{10，20,30}，代表一共三个人，整块金条长度为10+20+30=60。金条要分成10,20,30%_..2.:。如果先把长度60的金条分成10和50，花费60;再把长度50的金条分成20和30，花费50;一共花费110铜板。 但是如果先把长度60的金条分成30和30，花费60;再把长度30金条分成10和20，花费30;一共花费90铜板。<br> 输入一个数组，返回分割的最小代价。</p><h4 id="思想" tabindex="-1"><a class="header-anchor" href="#思想" aria-hidden="true">#</a> 思想</h4><p>哈佛曼树，利用小根堆，每次取出最小的两个数，做结合，然后将结合生成的数扔回小根堆，反复执行，直至小根堆只剩一个数字</p><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function">lessMoney</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> pQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cur <span class="token operator">=</span> pQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> pQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        sum <span class="token operator">+=</span> cur<span class="token punctuation">;</span>
        pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题2" tabindex="-1"><a class="header-anchor" href="#问题2" aria-hidden="true">#</a> 问题2</h3><p>输入:<br> 正数数组costs正数数组profits正数k<br> 正数m含义:<br> costs[i]表示i号项目的花费<br> profits[i]表示i号项目在扣除花费之后还能挣到的钱(利润)k表示你只能串行的最多做k个项目<br> m表示你初始的资金<br> 说明:<br> 你每做完一个项目，马上获得的收益，可以支持你去做下一个项目。输出: 你最后获得的最大钱数。</p><h4 id="思想-1" tabindex="-1"><a class="header-anchor" href="#思想-1" aria-hidden="true">#</a> 思想</h4><p>建立一个以成本为比较器的小根堆，一个以利润为比较器的大跟堆<br> 将所有项目扔到小根堆中，然后取出力所能及的项目，也就是成本低于当前资金的项目，扔到大跟堆里，这时候能够知道能够获得的利润最高的项目是谁，然后执行该项目使资金对应增加，反复执行该操作，直至K轮或者无项目可做</p><h4 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">findMaximizedCapital</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> w<span class="token punctuation">,</span> profits<span class="token punctuation">,</span> capital</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> minCostQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>capital <span class="token operator">-</span> b<span class="token punctuation">.</span>capital<span class="token punctuation">)</span>
    <span class="token keyword">const</span> maxProfitQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>profit <span class="token operator">-</span> a<span class="token punctuation">.</span>profit<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> profits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        minCostQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">profit</span><span class="token operator">:</span> profits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">capital</span><span class="token operator">:</span> capitals<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minCostQ<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> minCostQ<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>capital <span class="token operator">&lt;=</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxProfitQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>minCostQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxProfitQ<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> w<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        w <span class="token operator">+=</span> maxProfitQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>profit
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> w
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","006Greedy.html.vue"]]);export{r as default};
