import{_ as p,r as o,o as c,c as l,b as n,d as a,a as t,e}from"./app-72993491.js";const i={},r={id:"vue文档精读",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#vue文档精读","aria-hidden":"true"},"#",-1),d={href:"https://www.yuque.com/ninchengzhidexintu/ezqzcz/ggv4k5",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="什么是vue" tabindex="-1"><a class="header-anchor" href="#什么是vue" aria-hidden="true">#</a> 什么是Vue</h2><p>Vue是一个声明式组件化的MVVM框架，基于响应式驱动更新视图。Vue最大的特点就是响应式。</p><h2 id="选项式api和组合式api优劣" tabindex="-1"><a class="header-anchor" href="#选项式api和组合式api优劣" aria-hidden="true">#</a> 选项式API和组合式API优劣</h2><table><thead><tr><th>类型</th><th>选项式API</th><th>组合式API</th></tr></thead><tbody><tr><td>优点</td><td>1. 心智小；使用者不需要了解Vue的一些原理就可以轻松上手。比较符合面向对象<br>2. 官方推荐。</td><td>灵活度高，重用逻辑的模式强大。</td></tr><tr><td>缺点</td><td></td><td>你需要对Vue响应式系统有一定理解</td></tr></tbody></table><h2 id="模板vsjsx" tabindex="-1"><a class="header-anchor" href="#模板vsjsx" aria-hidden="true">#</a> 模板VSJSX</h2><table><thead><tr><th>类型</th><th>模板</th><th>JSX或者渲染函数</th></tr></thead><tbody><tr><td>渐进式</td><td>渐进式：它更接近原始的html</td><td></td></tr><tr><td>静态优化</td><td>由于模板的形式比较固定，所有vue编译器更容易对模板做静态分析。比如静态标记只有模板支持推荐</td><td>优化较小，Vue的很多优化享受不到</td></tr><tr><td>官方</td><td>推荐</td><td></td></tr><tr><td>灵活</td><td></td><td>比如写个递归，写个树。</td></tr></tbody></table><h2 id="为什么使用构建工具" tabindex="-1"><a class="header-anchor" href="#为什么使用构建工具" aria-hidden="true">#</a> 为什么使用构建工具</h2><p>首先构建工具并不是永远要被使用，但是大多数情况下，我们应该使用构建工具。对于一些小项目，我们不需要使用构建工具，直接脚本注入即可。对于大一些的项目，我们使用构建工具，可以帮助我们做很多的代码优化或者开发体验。比如热更新，babel转义，vue的sfc等。</p><h2 id="vue中如何去捕获错误" tabindex="-1"><a class="header-anchor" href="#vue中如何去捕获错误" aria-hidden="true">#</a> Vue中如何去捕获错误</h2><p>如果要定义一个应用级的错误处理器，它将捕获所有由子组件上抛的错误:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 处理错误 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="受限的全局访问" tabindex="-1"><a class="header-anchor" href="#受限的全局访问" aria-hidden="true">#</a> 受限的全局访问</h2><p>Vue表达式默认只能访问有限的全局变量列表，可以通过app.config.globalProperties配置</p><h2 id="使用计算属性" tabindex="-1"><a class="header-anchor" href="#使用计算属性" aria-hidden="true">#</a> 使用计算属性</h2><ol><li>要注意getter不应该具有副作用</li><li>setter不应该被用，或者用来修改源状态才触发getter</li></ol><p>计算属性本身是个响应式副作用，调度器中如果发现dirty数据发生改变触发trigger，getter中触发track</p><h2 id="什么是响应式" tabindex="-1"><a class="header-anchor" href="#什么是响应式" aria-hidden="true">#</a> 什么是响应式</h2><p>首先在讲响应式之前我们需要了解几个术语。<br> 当一个响应性数据发生变化时，然后相对应的调用了某个函数。<br> 第一个是副作用，此时这个函数就可以称为副作用函数。为什么是副作用，因为这个函数明显会修改函数外的状态。很明显这符合闭包，这个函数也不是纯函数。<br> 第二个是依赖，谁是依赖呢，就是这个响应式的数据，因为它的值被用来执行这个作用。也可以说这个作用是这个依赖的订阅者。<br> 响应式其实可以理解为一个魔法函数，能够在依赖发生改变时，调用副作用。</p><h2 id="vue2和vue3响应性实现有何异同" tabindex="-1"><a class="header-anchor" href="#vue2和vue3响应性实现有何异同" aria-hidden="true">#</a> Vue2和Vue3响应性实现有何异同</h2><p>Vue2和Vue3的基本思路是相同的，但是也有很多不一样的点</p><table><thead><tr><th>版本</th><th>Vue2</th><th>Vue3</th></tr></thead><tbody><tr><td>API</td><td>基于Object.defineProperty,它的返回值是原始对象，没有产生新的对象。数组的API不得不重写，你会发现你用Array.prototype.s</td><td>基于Proxy和Reflect，它的返回值是一个代理对象，而不是原始对象。使用Proxy的好处显而易见，可以直接劫持数组的方法</td></tr><tr><td>包装时机</td><td>逐层的遍历每一层的值，递归的去做响应式的包装</td><td>读取某个数据的时候再对其使用响应的包装（懒惰）</td></tr><tr><td>数据类型支持</td><td>不支持Map、Set等一些ES6出的数据类型</td><td>支持Map、Set等一些ES6出的数据类型</td></tr><tr><td>优化</td><td></td><td>Vue3做了不少优化，印象比较深的就是clean的优化，什么时候清除依赖，3.2版使用了位运算做的优化，性能提升巨大。</td></tr></tbody></table><p>当然Vue3也增加很多ref，shallowRef，readOnly， shallowReadOnly， triggerRef，customRef等大量的新API。都是基于reactive，readOnly和shallowReadOnly则只基于Proxy。基于访问器搞的。</p><h3 id="shallowref的应用" tabindex="-1"><a class="header-anchor" href="#shallowref的应用" aria-hidden="true">#</a> shallowRef的应用</h3><p>可以用来做大型数据结构的性能优化或是与外部的状态管理系统集成。当使用shallowRef的时候，我们依然可以通过triggerRef来触发它的副作用。比如我们修改了shallowRef内部的值，想要响应，手动调一下。</p><h3 id="customref" tabindex="-1"><a class="header-anchor" href="#customref" aria-hidden="true">#</a> customRef</h3><p>搞个函数式API，总的说还是蛮实用的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> customRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useDebouncedRef</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">200</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout
  <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> trigger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 跟踪</span>
        <span class="token keyword">return</span> value
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          value <span class="token operator">=</span> newValue
          <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 触发</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算属性缓存-vs-方法-vs-侦听器" tabindex="-1"><a class="header-anchor" href="#计算属性缓存-vs-方法-vs-侦听器" aria-hidden="true">#</a> 计算属性缓存 VS 方法 VS 侦听器</h2><table><thead><tr><th>类型</th><th>计算属性</th><th>方法</th><th>侦听器</th></tr></thead><tbody><tr><td>区别</td><td>基于响应式依赖缓存</td><td>重新渲染时，总是调用</td><td></td></tr><tr><td>优点</td><td>一个计算属性仅会在其响应式依赖更新时重新计算</td><td></td><td></td></tr><tr><td>最佳实践</td><td>不应该有副作用,避免直接修改计算属性值</td><td></td><td></td></tr></tbody></table><h2 id="不可变数据的意义" tabindex="-1"><a class="header-anchor" href="#不可变数据的意义" aria-hidden="true">#</a> 不可变数据的意义</h2><p>对于一个大的状态树，Vue每次更新都序列化整个状态对象对CPU和内存的开销是巨大的。这就是不可变数据的意义。可以通过immer配合shallowRef使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> produce <span class="token keyword">from</span> <span class="token string">&#39;immer&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> shallowRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useImmer</span><span class="token punctuation">(</span><span class="token parameter">baseState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span>baseState<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">updater</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span> updater<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> update<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="watcheffect和watch" tabindex="-1"><a class="header-anchor" href="#watcheffect和watch" aria-hidden="true">#</a> watchEffect和watch</h2><table><thead><tr><th>区别</th><th>watch</th><th>watchEffect</th></tr></thead><tbody><tr><td>API</td><td><code>const unWatch = watch(侦听源, callback, {flush: &#39;post&#39;})</code>基本相同，多一个侦听源都支持传递回调时机都支持停止侦听</td><td><code>const unWatchEffect = watchEffect(callback, {flush: &#39;post&#39;})</code>基本相同，少一个侦听源</td></tr><tr><td>侦听源</td><td>指定</td><td>自己根据依赖关系</td></tr><tr><td>依赖关系</td><td>明确</td><td>不太清晰</td></tr><tr><td>时机</td><td>懒执行，只有侦听源发生变化</td><td>立即调用</td></tr><tr><td>方便</td><td></td><td>代码更简洁</td></tr><tr><td>缺陷</td><td></td><td>watchEffect 仅会在其同步执行期间，才追踪依赖。在使用异步回调时，只有在第一个 await 正常工作前访问到的 property 才会被追踪。</td></tr></tbody></table><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><figure><img src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" alt="生命周期" tabindex="0" loading="lazy"><figcaption>生命周期</figcaption></figure><h3 id="什么时候触发onmounted-或者说什么时候组件视为已挂载" tabindex="-1"><a class="header-anchor" href="#什么时候触发onmounted-或者说什么时候组件视为已挂载" aria-hidden="true">#</a> 什么时候触发onMounted，或者说什么时候组件视为已挂载</h3><ol><li>它的所有同步子组件都被挂载了</li><li>它的DOM树已经创建并插入父容器了（要保证应用组件根容器在文档中）</li></ol><h3 id="onupdated的钩子里为什么不能更新" tabindex="-1"><a class="header-anchor" href="#onupdated的钩子里为什么不能更新" aria-hidden="true">#</a> onUpdated的钩子里为什么不能更新？</h3><p>因为会引起无限循环，可以用nextTick()更新</p><h3 id="什么时候算卸载了" tabindex="-1"><a class="header-anchor" href="#什么时候算卸载了" aria-hidden="true">#</a> 什么时候算卸载了</h3><ol><li>所有子组件都已经卸载</li><li>所有相关的响应式副作用（渲染效果和在 setup() 期间创建的计算属性/侦听器）都已经停止。</li></ol><h3 id="onbeforemount" tabindex="-1"><a class="header-anchor" href="#onbeforemount" aria-hidden="true">#</a> onBeforeMount</h3><p>钩子调用时，响应式状态设置已经搞定了，还没创建DOM节点</p><h2 id="全局注册vs局部注册" tabindex="-1"><a class="header-anchor" href="#全局注册vs局部注册" aria-hidden="true">#</a> 全局注册VS局部注册</h2><table><thead><tr><th>注册方式</th><th>全局注册</th><th>局部注册</th></tr></thead><tbody><tr><td>tree-shaking</td><td>tree-shaking差</td><td>tree-shaking优秀</td></tr><tr><td>依赖关系</td><td>不明确</td><td>明确</td></tr><tr><td>后代可用</td><td>可用</td><td>不可用</td></tr></tbody></table><h2 id="组件化的实践-如何去做组件化" tabindex="-1"><a class="header-anchor" href="#组件化的实践-如何去做组件化" aria-hidden="true">#</a> 组件化的实践，如何去做组件化</h2><ol><li>要确保prop遵循单向绑定原则，避免子组件以外修改父组件状态。如果prop是初始属性可以搞局部数据属性。如果prop是原始形式传入，需要做形式转化，可以用计算属性。</li><li>不要更改prop数组或者对象。这种情况子组件应该触发事件通知</li></ol><h2 id="为什要用组合式函数" tabindex="-1"><a class="header-anchor" href="#为什要用组合式函数" aria-hidden="true">#</a> 为什要用组合式函数</h2><ol><li>复用</li><li>很灵活</li><li>mixins不够好</li><li>更好的类型推导</li><li>生产包体积更小（编译成一个内联函数）</li><li>代码组织很强大，重构更简单</li></ol><table><thead><tr><th>技巧</th><th>Mixin</th><th>无渲染组件</th><th>React Hook/Vue组合式函数</th></tr></thead><tbody><tr><td>property来源</td><td>不清晰,意味着追溯实现和理解组件行为变得困难</td><td>清晰</td><td>清晰</td></tr><tr><td>命名空间冲突</td><td>有</td><td>无</td><td>有</td></tr><tr><td>耦合</td><td>高,多个mixin需要依赖共享的property键名来相互作用，隐性的耦合在一起</td><td>低</td><td>低</td></tr><tr><td>额外开销</td><td>无</td><td>有</td><td>无</td></tr></tbody></table><h2 id="vue的组合式api和react-hooks相比" tabindex="-1"><a class="header-anchor" href="#vue的组合式api和react-hooks相比" aria-hidden="true">#</a> Vue的组合式API和React Hooks相比</h2><table><thead><tr><th>技巧</th><th>Vue Compositon API</th><th>React Hooks</th></tr></thead><tbody><tr><td></td><td>组合式 API也并不限制调用顺序，还可以有条件地进行调用。</td><td>顺序严格，不可以写在条件分支里React</td></tr><tr><td></td><td></td><td>组件中定义的变量会被一个钩子函数闭包捕获，若开发者传递了错误的依赖数组，它将保持不变。这导致了 React 开发者非常依赖 ESLint 规则以确保传递了正确的依赖，然而，这些规则往往不够智能，保持正确的代价过高，在一些边缘情况时会遇到令人头疼的、不必要的报错信息大量的计算要用useMemo</td></tr><tr><td></td><td>Vue 的响应性系统运行时会自动收集计算属性和侦听器的依赖，因此无需我们手动声明依赖。</td><td></td></tr><tr><td></td><td>无需手动缓存回调函数来避免不必要的组件更新。</td><td>在默认情况下，传递给子组件的事件处理函数会导致子组件进行不必要的更新。子组件默认更新，并需要显式的调用 useCallback 作优化。这几乎是必需的，因此同样需要正确的依赖数组。忽视这一点会导致默认情况下对应用程序进行过度渲染，并可能在不知不觉中导致性能问题。</td></tr><tr><td></td><td>仅调用 setup() 或 <code>&lt;script setup&gt;</code> 的代码一次。这使得代码能更好地与 JavaScript 的习惯性使用的直觉结合起来，因为不需要担心闭包变量的问题</td><td>要解决变量闭包导致的问题，再结合并发功能，使得很难推理出一段钩子代码是什么时候运行的，并且很不好处理需要横跨多个渲染 (通过 useRef) 的可变状态。</td></tr></tbody></table><h2 id="vue3增加了哪些内置组件" tabindex="-1"><a class="header-anchor" href="#vue3增加了哪些内置组件" aria-hidden="true">#</a> Vue3增加了哪些内置组件</h2><p>首先Teleport，举个例子，之前做弹窗，一般都是mounted钩子执行时，把弹窗添加到body元素上，现在的话，直接一个teleport完美解决这些问题<br> Suspense，这个主要用在多个组件需要异步加载时，页面出现3个loading，不如等整体全加载完了再显示出来，一般就是用一个loading代替3个loading</p><h2 id="为什么要用sfc开发" tabindex="-1"><a class="header-anchor" href="#为什么要用sfc开发" aria-hidden="true">#</a> 为什么要用SFC开发</h2><ol><li>渐进式的环境 熟悉的HTML、CSS和JS</li><li>罗列本身就强耦合的逻辑关注点。模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性。不睡说不同文件分开放就一定好。</li><li>预编译模板</li><li>组件级隔离的CSS，加强的CSS变量</li><li>使用组合式API更简单<code>&lt;script setup&gt;</code></li><li>通过交叉分析模板和逻辑代码能进行更多编译时优化</li><li>更好的IDE支持，提供自动补全和对模板中表达式的类型检查</li><li>开箱即用的模块热更新（HMR） 支持</li></ol><p>SPA、SSG、SSR都可以使用SFC来开发<br> 如果有时候追求体积小可以用petite-vue 一个超级迷你的vue</p><h2 id="sfc如何工作" tabindex="-1"><a class="header-anchor" href="#sfc如何工作" aria-hidden="true">#</a> SFC如何工作</h2><p>其实是通过@vue/compiler-sfc 编译为标准的 JavaScript 和 CSS</p><h2 id="如何实现一个简单路由" tabindex="-1"><a class="header-anchor" href="#如何实现一个简单路由" aria-hidden="true">#</a> 如何实现一个简单路由</h2><p>通过监听浏览器hashchange事件，使用动态组件，按照浏览器的地址去显示对应的组件就ok</p><h2 id="什么是状态管理" tabindex="-1"><a class="header-anchor" href="#什么是状态管理" aria-hidden="true">#</a> 什么是状态管理</h2><p>每一个Vue实例其实就是已经在管理自己的状态了<br> 以一个简单计数器组件为例：它由以下部分组成：</p><ol><li>状态：驱动整个应用的数据源</li><li>视图：对状态的一种声明式映射</li><li>动作：根据用户在视图中的操作，状态进行对应的变更</li></ol><figure><img src="https://cn.vuejs.org/assets/state-flow.a8bc738e.png" alt="状态管理" tabindex="0" loading="lazy"><figcaption>状态管理</figcaption></figure><p>多个组件共享一个状态，就会有些问题</p><ol><li>多个视图可能都依赖同一部分状态（一个可行的办法是将共享状态“提升”到共同祖先的组件上去，但会造成props深潜）</li><li>不同视图的动作可能都会对统一部分状态产生影响（通过引用父子组件实例，导致健壮性脆弱）</li></ol><p>简单的处理方案是搞一个全局单例出来专门做这个。项目比较大的话可以考虑搞个Pinia进来</p><h2 id="为什么需要测试-测试的类型" tabindex="-1"><a class="header-anchor" href="#为什么需要测试-测试的类型" aria-hidden="true">#</a> 为什么需要测试？测试的类型？</h2><p>为了发布前捕获并解决一些问题<br> 测试的类型，主要分单元测试，组件测试，端对端测试<br> 可以考虑vitest 或者jest</p><h2 id="ssr-为什么要用服务端渲染" tabindex="-1"><a class="header-anchor" href="#ssr-为什么要用服务端渲染" aria-hidden="true">#</a> SSR 为什么要用服务端渲染</h2><table><thead><tr><th>类型</th><th>SSR（和SPA比较）</th><th>SGG（和SSR比较）</th></tr></thead><tbody><tr><td>特点</td><td>● 更快的内容到达时间<br>● 统一的心智模型<br>● 更好的SEO<br>● 会有些限制部分钩子用不了，一些库可能需要特殊处理<br>● 更多的构建配置和部署相关要求。服务端要有个node.js运行环境。<br>● 更高的服务端负载。需要采用合理的缓存策略。</td><td>● 提前编译好，但所有人都相同<br>● 花销小，服务端负载小。</td></tr></tbody></table><p>比较好用的框架Nuxt<br> 运作模式：服务端和客户端同时引用同一份app.js代码，然后进行编译，服务端编译成字符串，直接贴在html里返回给客户端，然后客户端里激活这些html。</p><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><p>从几个方面入手</p><ol><li><p>首屏渲染</p><ol><li>包体积： <ol><li>使用构建，tree-shaking+预编译</li><li>引入新依赖要注意，有些依赖有更好的引入方式。比如lodash-es</li><li>代码拆分。有些通用性的包可以拆分出来</li></ol></li><li>按需引入</li><li>SSR/SSG</li><li>开启gzip</li><li>雪碧图</li></ol></li><li><p>更新优化</p><ol><li>props稳定，不要总是改大量组件的属性，尽量能少改就少改</li><li>v-once</li><li>v-memo</li><li>虚拟列表 vue-virtual-scroller,vue-virtual-scroll-grid</li><li>运用不可变数据 Immer</li><li>避免不必要的组件抽象</li></ol></li></ol><h2 id="vue的渲染机制是怎样的" tabindex="-1"><a class="header-anchor" href="#vue的渲染机制是怎样的" aria-hidden="true">#</a> Vue的渲染机制是怎样的</h2><p>首先我们需要知道DOM操作是很消耗性能的，而Vue的虚拟DOM实际上作用就是减少DOM操作。V8的js引擎已经足够快了，通过js来模拟虚拟DOM，然后当需要修改UI时，先修改虚拟DOM，然后虚拟DOM进行新老的比对来决定是否要执行本次更新，从而减少了DOM操作。<br> 大体流程是这样的：<br> 初始化时，运行时渲染器会遍历整个虚拟DOM树，并据此构建真实的DOM树。这个过程被称为挂载。<br> 如果我们有两份虚拟DOM树，渲染器就会比较遍历它们，找出区别，应用到真实DOM，这个过程就是patch，也说diff</p><h3 id="渲染管线" tabindex="-1"><a class="header-anchor" href="#渲染管线" aria-hidden="true">#</a> 渲染管线</h3><ol><li>编译:Vue 模板被编译为渲染函数：即用来返回虚拟 DOM 树的函数。这一步骤可以通过构建步骤提前完成，也可以通过使用运行时编译器即时完成。</li><li>挂载:运行时渲染器调用渲染函数，遍历返回的虚拟 DOM 树，并基于它创建实际的 DOM 节点。这一步会作为响应式副作用执行，因此它会追踪其中所用到的所有响应式依赖。</li><li>更新：当一个依赖发生变化后，副作用会重新运行，这时候会创建一个更新后的虚拟 DOM 树。运行时渲染器遍历这棵新树，将它与旧树进行比较，然后将必要的更新应用到真实 DOM 上去。</li></ol><figure><img src="https://cn.vuejs.org/assets/render-pipeline.03805016.png" alt="渲染管线" tabindex="0" loading="lazy"><figcaption>渲染管线</figcaption></figure><h3 id="patch的过程" tabindex="-1"><a class="header-anchor" href="#patch的过程" aria-hidden="true">#</a> patch的过程</h3><p>值得一提的是在过去Vue2需要遍历整棵树，比较每个vnode上的props来确保正确性，对性能压力比较大。Vue3中通过静态标记，避免过多的比较，节约内存。这个过程也称静态提升。当与多个连续的静态元素时，会被压缩成一个&quot;静态vnode&quot;，这些节点通过innerHTML挂载，同时初次挂载后缓存DOM节点。其他地方通过cloneNode()重用。静态标记的比较通过位运算来做，速度很快。<br> 还有一个关键的点就是树打平。引入一个概念“区块”，内部结构是稳定的一个部分可被称之为一个区块。<br> 然后把这个区块对应的树展平成一个数组，这个数组中包含所有该区块后代的动态节点，并且让这个区块追踪这些节点，每次更新遍历这些节点就行了。patch会更高效。v-if 和 v-for 指令会创建新的区块节点：一个子区块会在父区块的动态子节点数组中被追踪</p><h4 id="树结构打平" tabindex="-1"><a class="header-anchor" href="#树结构打平" aria-hidden="true">#</a> 树结构打平</h4><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div&gt; &lt;!-- root block --&gt;
  &lt;div&gt;...&lt;/div&gt;         &lt;!-- 不会追踪 --&gt;
  &lt;div :id=&quot;id&quot;&gt;&lt;/div&gt;   &lt;!-- 要追踪 --&gt;
  &lt;div&gt;                  &lt;!-- 不会追踪 --&gt;
    &lt;div&gt;{{ bar }}&lt;/div&gt; &lt;!-- 要追踪 --&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译的结果会被打平为一个数组，仅包含所有动态的后代节点：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>div (block root)
- div 带有 :id 绑定
- div 带有 {{ bar }} 绑定
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当这个组件需要重渲染时，只需要遍历这个打平的树而非整棵树。这也就是我们所说的树结构打平，这大大减少了我们在虚拟 DOM 协调时需要遍历的节点数量。模板中任何的静态部分都会被高效地略过。</p><p>v-if 和 v-for 指令会创建新的区块节点：一个子区块会在父区块的动态子节点数组中被追踪，这为他们的父区块保留了一个稳定的结构。</p><h4 id="渲染流程图" tabindex="-1"><a class="header-anchor" href="#渲染流程图" aria-hidden="true">#</a> 渲染流程图</h4>`,91),h={href:"https://www.processon.com/diagraming/62309f2f07912907c2862ecd",target:"_blank",rel:"noopener noreferrer"},v=e(`<figure><img src="https://cdn.jsdelivr.net/gh/lxy951101/chart-bed/assets20230910172559.png" alt="渲染流程图" tabindex="0" loading="lazy"><figcaption>渲染流程图</figcaption></figure><h4 id="运行时流程图-初次渲染" tabindex="-1"><a class="header-anchor" href="#运行时流程图-初次渲染" aria-hidden="true">#</a> 运行时流程图（初次渲染）</h4><figure><img src="https://cdn.jsdelivr.net/gh/lxy951101/chart-bed/assets20230910172634.png" alt="运行时流程图（初次渲染）" tabindex="0" loading="lazy"><figcaption>运行时流程图（初次渲染）</figcaption></figure><h3 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法" aria-hidden="true">#</a> diff算法</h3><p>在Vue2的基础上进行了增强</p><p>还是老一套 先 头头比较-&gt;尾尾比较-&gt;头尾-&gt;尾头-&gt;... 直到不能比较了，Vue2就直接拿key硬怼了。Vue3里用了个最长递增子序列，最长递增也就意味能够保留最多的子节点位置不变，然后把剩下的插入下就搞定了。</p><h4 id="最长递增子序列思路" tabindex="-1"><a class="header-anchor" href="#最长递增子序列思路" aria-hidden="true">#</a> 最长递增子序列思路</h4><p>贪心+二分查找</p><p>声明一个数组，一个关系表（记录当前索引的上一个索引）。遍历节点，如果节点索引大，那就直接扔到数组，并记录关系，否则就二分查找，查找完也要记录关系。最后通过记录的关系，找到最长的递增子序列。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> memoryCur2Pre <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> topIndex <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">const</span> topValue <span class="token operator">=</span> nums<span class="token punctuation">[</span>topIndex<span class="token punctuation">]</span>
        <span class="token keyword">const</span> curValue <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>topValue <span class="token operator">&lt;</span> curValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            memoryCur2Pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> topIndex
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">const</span> midIndex <span class="token operator">=</span> result<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>curValue <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    r <span class="token operator">=</span> mid
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">const</span> findIndex <span class="token operator">=</span> result<span class="token punctuation">[</span>l<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>curValue <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>findIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    memoryCur2Pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
                result<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> i
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> result<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> index <span class="token operator">=</span> result<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> index
        index <span class="token operator">=</span> memoryCur2Pre<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// console.log(result.map((i) =&gt; nums[i]))</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span>length
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="keepalive的max是怎么做的" tabindex="-1"><a class="header-anchor" href="#keepalive的max是怎么做的" aria-hidden="true">#</a> KeepAlive的max是怎么做的</h2><p>lru 最近最久未使用策略</p><h3 id="lru思路" tabindex="-1"><a class="header-anchor" href="#lru思路" aria-hidden="true">#</a> LRU思路</h3><p>最近最久未使用策略，用链表搞，删链表头，每次增加新元素判断是否包含，包含就先删了原先的，是否超长了 超长就删表头，最后都是把新元素添加的表尾</p><h2 id="谈谈你对-script-setup-的了解" tabindex="-1"><a class="header-anchor" href="#谈谈你对-script-setup-的了解" aria-hidden="true">#</a> 谈谈你对<code>&lt;script setup&gt;</code>的了解</h2><p>它是SFC 组合式API的编译时语法糖，它有很多好处</p><ol><li>更少的代码</li><li>使用纯ts声明props和抛出事件</li><li>更好的性能（编译时会将其编译成同一作用域的渲染函数，没有中间代理）</li><li>更好的IDE类型推断（减少语言服务器从代码中抽离类型的工作）</li></ol><p>它也有些不足：</p><ol><li>很多自定义的村规</li><li>使用顶层await的时候，setup会编译成async setup(), 这个async setup要喝suspense组合使用，这个内置组件测试阶段。</li></ol><h3 id="怎么做到更好的ide类型推断" tabindex="-1"><a class="header-anchor" href="#怎么做到更好的ide类型推断" aria-hidden="true">#</a> 怎么做到更好的IDE类型推断</h3><ol><li>defineProps,defineEmits,defineExpose</li></ol><h3 id="还有哪些api" tabindex="-1"><a class="header-anchor" href="#还有哪些api" aria-hidden="true">#</a> 还有哪些API</h3><ol><li>defineProps经常结合withDefaults使用 如果有响应式语法糖 也可以用解构来写</li><li>useSlots，useAttrs</li></ol><h2 id="有哪些让路由重新获取参数的方法" tabindex="-1"><a class="header-anchor" href="#有哪些让路由重新获取参数的方法" aria-hidden="true">#</a> 有哪些让路由重新获取参数的方法</h2><p>路由守卫，计算属性，侦听器</p><h2 id="vue路由如何捕获404" tabindex="-1"><a class="header-anchor" href="#vue路由如何捕获404" aria-hidden="true">#</a> Vue路由如何捕获404</h2>`,26),m={href:"https://paths.esm.dev/?p=AAMeJbiAwQEFDBbAkAWNQQoQ0AGACriUAQWwDGAOkSkAQA..",target:"_blank",rel:"noopener noreferrer"},b=e('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/:pathMatch(.*)*&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;NotFound&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> NotFound <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user-:afterUser(.*)&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserGeneric <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么要做路由命名" tabindex="-1"><a class="header-anchor" href="#为什么要做路由命名" aria-hidden="true">#</a> 为什么要做路由命名</h2><ul><li>没有硬编码URL</li><li>params自动编码/解码</li><li>防止你在url中打错字</li><li>绕过路径排序</li></ul><h2 id="路由有哪些模式" tabindex="-1"><a class="header-anchor" href="#路由有哪些模式" aria-hidden="true">#</a> 路由有哪些模式</h2><p>哈希模式和History模式</p><table><thead><tr><th>模式</th><th>哈希模式</th><th>History模式</th></tr></thead><tbody><tr><td>服务器支持</td><td>不需要服务器支持</td><td>需要服务器添加一个简单的回退路由。如果URL不匹配任何静态资源，它应该提供与你应用程序中index.html相同的页面</td></tr><tr><td>SEO</td><td>有不好的影响</td><td></td></tr><tr><td>URL</td><td>会增加一个#</td><td>看起来正常</td></tr></tbody></table><h2 id="一个路由有多个视图不想嵌套要怎么处理" tabindex="-1"><a class="header-anchor" href="#一个路由有多个视图不想嵌套要怎么处理" aria-hidden="true">#</a> 一个路由有多个视图不想嵌套要怎么处理</h2><p>视图命名。</p><h2 id="路由的几个api" tabindex="-1"><a class="header-anchor" href="#路由的几个api" aria-hidden="true">#</a> 路由的几个api</h2><p>push和replace</p><h2 id="完整的导航解析流程" tabindex="-1"><a class="header-anchor" href="#完整的导航解析流程" aria-hidden="true">#</a> 完整的导航解析流程</h2><ol><li>导航被触发。</li><li>在失活的组件里调用 beforeRouteLeave 守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h2 id="路由元信息有什么用" tabindex="-1"><a class="header-anchor" href="#路由元信息有什么用" aria-hidden="true">#</a> 路由元信息有什么用？</h2><p>当你希望将任意信息添加到路由上的时候，可以通过meta属性来实现。meta字段可以合并父字段</p>',14),f={id:"源码学习笔记",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#源码学习笔记","aria-hidden":"true"},"#",-1),y={href:"https://www.yuque.com/ninchengzhidexintu/scdcup/tirwsy",target:"_blank",rel:"noopener noreferrer"},x=e(`<h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h2><h3 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;div id=&quot;foo&quot; :class=&quot;bar.baz&quot;&gt;
  {{ world.burn() }}
  &lt;div v-if=&quot;ok&quot;&gt;yes&lt;/div&gt;
  &lt;template v-else&gt;no&lt;/template&gt;
  &lt;div v-for=&quot;(value, index) in list&quot;&gt;&lt;span&gt;{{ value + index }}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译后-模块化编译-module模式" tabindex="-1"><a class="header-anchor" href="#编译后-模块化编译-module模式" aria-hidden="true">#</a> 编译后 模块化编译（module模式）</h3><p>此模式不使用<code>with</code>关键字，我们多数情况下会使用打包工具，走的也是此路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock<span class="token punctuation">,</span> createCommentVNode <span class="token keyword">as</span> _createCommentVNode<span class="token punctuation">,</span> createTextVNode <span class="token keyword">as</span> _createTextVNode<span class="token punctuation">,</span> Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span> renderList <span class="token keyword">as</span> _renderList<span class="token punctuation">,</span> createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span> normalizeClass <span class="token keyword">as</span> _normalizeClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>world<span class="token punctuation">.</span><span class="token function">burn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>ok<span class="token punctuation">)</span>
      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
          <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_renderList</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>value <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span> <span class="token comment">/* UNKEYED_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* CLASS */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译后-运行时编译-function" tabindex="-1"><a class="header-anchor" href="#编译后-运行时编译-function" aria-hidden="true">#</a> 编译后 运行时编译，（function）</h3><p>此模式使用<code>with</code>关键字，将_ctx指定为环境上下文</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> _Vue <span class="token operator">=</span> Vue

<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">with</span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">toDisplayString</span><span class="token operator">:</span> _toDisplayString<span class="token punctuation">,</span> <span class="token literal-property property">openBlock</span><span class="token operator">:</span> _openBlock<span class="token punctuation">,</span> <span class="token literal-property property">createElementBlock</span><span class="token operator">:</span> _createElementBlock<span class="token punctuation">,</span> <span class="token literal-property property">createCommentVNode</span><span class="token operator">:</span> _createCommentVNode<span class="token punctuation">,</span> <span class="token literal-property property">createTextVNode</span><span class="token operator">:</span> _createTextVNode<span class="token punctuation">,</span> <span class="token literal-property property">Fragment</span><span class="token operator">:</span> _Fragment<span class="token punctuation">,</span> <span class="token literal-property property">renderList</span><span class="token operator">:</span> _renderList<span class="token punctuation">,</span> <span class="token literal-property property">createElementVNode</span><span class="token operator">:</span> _createElementVNode<span class="token punctuation">,</span> <span class="token literal-property property">normalizeClass</span><span class="token operator">:</span> _normalizeClass <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token function">_toDisplayString</span><span class="token punctuation">(</span>world<span class="token punctuation">.</span><span class="token function">burn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      ok
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_renderList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
          <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>value <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span> <span class="token comment">/* UNKEYED_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* CLASS */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function w(_,V){const s=o("ExternalLinkIcon");return c(),l("div",null,[n("h1",r,[u,a(),n("a",d,[a("Vue文档精读"),t(s)])]),k,n("p",null,[n("a",h,[a("流程图地址"),t(s)])]),v,n("p",null,[a("在路由中使用自定义正则表达式, 然后因为Vue路由中实际上是有一个路由排名优先级策略的，像我列的这个大概是-8分，就是缺省才用的到。算这个分 可以用一个"),n("a",m,[a("工具"),t(s)])]),b,n("h2",f,[g,a(),n("a",y,[a("源码学习笔记"),t(s)])]),x])}const E=p(i,[["render",w],["__file","001Vue.html.vue"]]);export{E as default};
