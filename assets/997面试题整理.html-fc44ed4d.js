import{_ as i,r as c,o as l,c as d,b as n,d as a,a as s,w as t,e as o}from"./app-72993491.js";const r={},u=n("h1",{id:"面经",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经","aria-hidden":"true"},"#"),a(" 面经")],-1),h=n("h2",{id:"作业帮-9月12日",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#作业帮-9月12日","aria-hidden":"true"},"#"),a(" 作业帮（9月12日）")],-1),k={id:"css有哪些定位",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#css有哪些定位","aria-hidden":"true"},"#",-1),v={id:"div水平垂直居中-作业帮",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#div水平垂直居中-作业帮","aria-hidden":"true"},"#",-1),b=n("h3",{id:"grid和flex区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grid和flex区别","aria-hidden":"true"},"#"),a(" Grid和Flex区别")],-1),f=n("p",null,"一个面向一维一个面向二维",-1),E=n("h3",{id:"vue2和vue3的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue2和vue3的区别","aria-hidden":"true"},"#"),a(" Vue2和Vue3的区别")],-1),g=n("p",null,"开放性题目，答到一半考官说可以了",-1),B={id:"promise实现原理",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#promise实现原理","aria-hidden":"true"},"#",-1),A={id:"class和构造函数的区别",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#class和构造函数的区别","aria-hidden":"true"},"#",-1),y={href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/20",target:"_blank",rel:"noopener noreferrer"},D={id:"实现promise-all",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#实现promise-all","aria-hidden":"true"},"#",-1),C={id:"事件循环机制",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#事件循环机制","aria-hidden":"true"},"#",-1),j=o(`<h3 id="异步方法执行顺序问题" tabindex="-1"><a class="header-anchor" href="#异步方法执行顺序问题" aria-hidden="true">#</a> 异步方法执行顺序问题</h3><p>大体记忆中这个题这样，具体可能写错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Promise&#39;</span><span class="token punctuation">)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),P={id:"函数柯里化",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#函数柯里化","aria-hidden":"true"},"#",-1),T=o(`<p>手写的时候忘记怎么写了，不过最后该题应该是无限累加器而不是柯里化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),V={id:"无限累加器",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#无限累加器","aria-hidden":"true"},"#",-1),N={id:"浏览器缓存",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#浏览器缓存","aria-hidden":"true"},"#",-1),I=o(`<h3 id="vite生产环境下生成的hash有问题" tabindex="-1"><a class="header-anchor" href="#vite生产环境下生成的hash有问题" aria-hidden="true">#</a> vite生产环境下生成的hash有问题？</h3><h2 id="高途-9月12日" tabindex="-1"><a class="header-anchor" href="#高途-9月12日" aria-hidden="true">#</a> 高途（9月12日）</h2><p>因为网络问题，没有笔试</p><h3 id="上传二进制文件的请求头" tabindex="-1"><a class="header-anchor" href="#上传二进制文件的请求头" aria-hidden="true">#</a> 上传二进制文件的请求头</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入 axios 库</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个 FormData 对象</span>
<span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将要上传的二进制文件添加到 FormData 对象中</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> <span class="token string">&#39;filename.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发送 POST 请求</span>
axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/upload&#39;</span><span class="token punctuation">,</span> formData<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;multipart/form-data&#39;</span> <span class="token comment">// 设置请求头，指定数据类型为 FormData</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理响应数据</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理请求错误</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们首先通过 new FormData() 创建了一个 FormData 对象，然后使用 append() 方法将要上传的二进制文件添加到 FormData 对象中。接着，在发送 POST 请求时，将 FormData 对象作为请求体，并通过 headers 参数设置请求头，指定数据类型为 FormData。</p><p>需要注意的是，由于二进制文件是以流的形式上传的，因此不需要手动设置请求头中的 Content-Length 字段，axios 会自动计算并添加该字段。</p>`,7),O={id:"webpack-plugin机制",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#webpack-plugin机制","aria-hidden":"true"},"#",-1),G=o('<h2 id="定制一个webpack插件-比如实现类似ssr的功能" tabindex="-1"><a class="header-anchor" href="#定制一个webpack插件-比如实现类似ssr的功能" aria-hidden="true">#</a> 定制一个webpack插件，比如实现类似SSR的功能</h2><p>我的方案是以vue为例，模拟一些初始的服务端数据，然后通过vue的compileSSR生成字符串，然后文件读写操作生成html。与考官所采用的方案应该不符。</p><h2 id="美团一面-9月8日" tabindex="-1"><a class="header-anchor" href="#美团一面-9月8日" aria-hidden="true">#</a> 美团一面（9月8日）</h2><h3 id="webpack-rollup-esbuild-差异以及为什么选择" tabindex="-1"><a class="header-anchor" href="#webpack-rollup-esbuild-差异以及为什么选择" aria-hidden="true">#</a> webpack ，rollup ，esbuild 差异以及为什么选择</h3><h3 id="pnpm和npm-区别-package-lock-版本管理" tabindex="-1"><a class="header-anchor" href="#pnpm和npm-区别-package-lock-版本管理" aria-hidden="true">#</a> pnpm和npm 区别，package.lock 版本管理</h3><h3 id="先做下自我介绍-为什么要应聘" tabindex="-1"><a class="header-anchor" href="#先做下自我介绍-为什么要应聘" aria-hidden="true">#</a> 先做下自我介绍？为什么要应聘？</h3><h3 id="讲讲你都做过哪些项目" tabindex="-1"><a class="header-anchor" href="#讲讲你都做过哪些项目" aria-hidden="true">#</a> 讲讲你都做过哪些项目</h3><h3 id="jsbridge是如何做到和客户端通信的-客户端注入的代码你看了吗-你平时是如何调试客户端注入的js代码的" tabindex="-1"><a class="header-anchor" href="#jsbridge是如何做到和客户端通信的-客户端注入的代码你看了吗-你平时是如何调试客户端注入的js代码的" aria-hidden="true">#</a> JSBridge是如何做到和客户端通信的，客户端注入的代码你看了吗，你平时是如何调试客户端注入的js代码的？</h3><h3 id="vue2到vue3有什么不同-你是怎么迁移的" tabindex="-1"><a class="header-anchor" href="#vue2到vue3有什么不同-你是怎么迁移的" aria-hidden="true">#</a> vue2到vue3有什么不同？你是怎么迁移的？</h3><h3 id="讲讲vue的运行时、编译是做的怎样的处理" tabindex="-1"><a class="header-anchor" href="#讲讲vue的运行时、编译是做的怎样的处理" aria-hidden="true">#</a> 讲讲vue的运行时、编译是做的怎样的处理</h3><h3 id="笔试-eventbus实现-你做的是一个单例-那我如何绑定this" tabindex="-1"><a class="header-anchor" href="#笔试-eventbus实现-你做的是一个单例-那我如何绑定this" aria-hidden="true">#</a> 笔试：EventBus实现，你做的是一个单例，那我如何绑定this</h3>',11),M=n("h2",{id:"美团二面",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#美团二面","aria-hidden":"true"},"#"),a(" 美团二面")],-1),Q=n("p",null,"全程都是按照简历上的项目聊天，聊完后给了一道面试题",-1),z={id:"promisemap限制并发",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#promisemap限制并发","aria-hidden":"true"},"#",-1),K={id:"webpack打包体积优化",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#webpack打包体积优化","aria-hidden":"true"},"#",-1),W=n("h2",{id:"作业帮二面-2023-9-19",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#作业帮二面-2023-9-19","aria-hidden":"true"},"#"),a(" 作业帮二面（2023/9/19）")],-1),X=n("p",null,"全程基本上是讲简历上的难点都是怎么做的",-1),Y={id:"chunk",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#chunk","aria-hidden":"true"},"#",-1);function $(nn,an){const e=c("RouterLink"),p=c("ExternalLinkIcon");return l(),d("div",null,[u,h,n("h3",k,[m,a(),s(e,{to:"/questions/001CSS.html#css%E6%9C%89%E5%93%AA%E4%BA%9B%E5%AE%9A%E4%BD%8D-%E7%BE%8E%E5%9B%BE"},{default:t(()=>[a("CSS有哪些定位")]),_:1})]),n("h3",v,[_,a(),s(e,{to:"/questions/001CSS.html#div%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E4%BD%9C%E4%B8%9A%E5%B8%AE"},{default:t(()=>[a("div水平垂直居中（作业帮）")]),_:1})]),b,f,E,g,n("h3",B,[x,a(),s(e,{to:"/coding/001es.html#promise"},{default:t(()=>[a("Promise实现原理")]),_:1})]),n("h3",A,[w,a(),n("a",y,[a("class和构造函数的区别"),s(p)])]),n("p",null,[a("同"),s(e,{to:"/questions/003JS.html#es5-es6%E7%9A%84%E7%BB%A7%E6%89%BF%E9%99%A4%E4%BA%86%E5%86%99%E6%B3%95%E4%BB%A5%E5%A4%96%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB-%E4%BD%9C%E4%B8%9A%E5%B8%AE"},{default:t(()=>[a("ES5/ES6的继承除了写法以外还有什么区别？（作业帮）")]),_:1})]),n("h3",D,[F,a(),s(e,{to:"/coding/001es.html#promise-all"},{default:t(()=>[a("实现Promise.all")]),_:1})]),n("h3",C,[S,a(),s(e,{to:"/questions/002Browser.html#%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B-%E4%BD%9C%E4%B8%9A%E5%B8%AE"},{default:t(()=>[a("事件循环机制")]),_:1})]),j,n("h3",P,[q,a(),s(e,{to:"/coding/002lodash.html#%E6%9F%AF%E9%87%8C%E5%8C%96"},{default:t(()=>[a("函数柯里化")]),_:1})]),T,n("h3",V,[L,a(),s(e,{to:"/coding/002lodash.html#%E6%9F%AF%E9%87%8C%E5%8C%96"},{default:t(()=>[a("无限累加器")]),_:1})]),n("h3",N,[R,a(),s(e,{to:"/questions/002Browser.html#cache-control"},{default:t(()=>[a("浏览器缓存")]),_:1})]),I,n("h2",O,[J,a(),s(e,{to:"/engineering/002webpack%E9%85%8D%E7%BD%AE.html#%E6%8F%92%E4%BB%B6%E6%9E%B6%E6%9E%84"},{default:t(()=>[a("webpack plugin机制")]),_:1})]),G,n("p",null,[s(e,{to:"/coding/003coding.html#%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83"},{default:t(()=>[a("EventBus")]),_:1})]),M,Q,n("h3",z,[H,a(),s(e,{to:"/coding/003coding.html#promisemap"},{default:t(()=>[a("PromiseMap限制并发")]),_:1})]),n("h3",K,[U,a(),s(e,{to:"/questions/999Other.html#%E6%96%B9%E6%A1%88"},{default:t(()=>[a("webpack打包体积优化")]),_:1})]),W,X,n("h3",Y,[Z,a(),s(e,{to:"/coding/002lodash.html#chunk"},{default:t(()=>[a("chunk")]),_:1})])])}const en=i(r,[["render",$],["__file","997面试题整理.html.vue"]]);export{en as default};
