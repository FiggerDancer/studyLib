import{_ as p,r as o,o as t,c as i,b as n,d as s,a as e,e as l}from"./app-72993491.js";const c={},r=n("h1",{id:"关于package和npm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于package和npm","aria-hidden":"true"},"#"),s(" 关于package和npm")],-1),d=n("h2",{id:"semver与版本管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#semver与版本管理","aria-hidden":"true"},"#"),s(" semver与版本管理")],-1),u={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>major: 当你发了一个含有 Breaking Change 的 API<br> minor: 当你新增了一个向后兼容的功能时<br> patch: 当你修复了一个向后兼容的 Bug 时</p><p>对于 ~1.2.3 而言，它的版本号范围是 &gt;=1.2.3 &lt;1.3.0</p><p>对于 ^1.2.3 而言，它的版本号范围是 &gt;=1.2.3 &lt;2.0.0</p><p>当我们 npm i 时，默认的版本号是 ^，可最大限度地在向后兼容与新特性之间做取舍，但是有些库有可能不遵循该规则，我们在项目时应当使用 yarn.lock/package-lock.json 锁定版本号。</p><h3 id="package-lock-json-工作流程" tabindex="-1"><a class="header-anchor" href="#package-lock-json-工作流程" aria-hidden="true">#</a> package-lock.json 工作流程</h3><ol><li>npm i webpack，此时下载最新 webpack 版本 5.58.2，在 package.json 中显示为 webpack: ^5.58.2，版本号范围是 &gt;=5.58.2 &lt; 6.0.0</li><li>在 package-lock.json 中全局搜索 webpack，发现 webpack 的版本是被锁定的，也是说它是确定的 webpack: 5.58.2</li><li>webpack 最新版本为 5.100.0，但由于 webpack 版本在 package-lock.json 中锁死，每次上线时仍然下载 5.58.2 版本号</li><li>webpack 最新版本为 6.0.0<br> 4.1 分支1 但由于 webpack 版本在 package-lock.json 中锁死，且 package.json 中 webpack 版本号为 ^5.58.2，与 package-lock.json 中为一致的版本范围。每次上线时仍然下载 5.58.2 版本号<br> 4.2 分支2，webpack需要进行升级，此时手动改写 package.json 中 webpack 版本号为 ^6.0.0，与 package-lock.json 中不是一致的版本范围。此时 npm i 将下载 6.0.0 最新版本号，并重写 package-lock.json 中锁定的版本号为 6.0.0</li></ol><p>当 package-lock.json 该 package 锁死的版本号符合 package.json 中的版本号范围时，将以 package-lock.json 锁死版本号为主。</p><p>当 package-lock.json 该 package 锁死的版本号不符合 package.json 中的版本号范围时，将会安装该 package 符合 package.json 版本号范围的最新版本号，并重写 package-lock.json</p><h2 id="输出文件" tabindex="-1"><a class="header-anchor" href="#输出文件" aria-hidden="true">#</a> 输出文件</h2><h3 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> main</h3><h3 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h3><h3 id="exports" tabindex="-1"><a class="header-anchor" href="#exports" aria-hidden="true">#</a> exports</h3><p>exports 可以更容易地控制子目录的访问路径，也被称为 export map</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;electron&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;development&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-electron-node-with-devtools.js&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./wrapper-electron-node-with-devtools.js&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-electron-node-with-devtools.cjs&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;production&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-electron-node-optimized.js&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./wrapper-electron-node-optimized.js&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-electron-node-optimized.cjs&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./wrapper-electron-node-process-env.cjs&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;development&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-electron-with-devtools.js&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;production&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-electron-optimized.js&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-electron-optimized.js&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;development&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-node-with-devtools.js&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./wrapper-node-with-devtools.js&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-node-with-devtools.cjs&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;production&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-node-optimized.js&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./wrapper-node-optimized.js&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-node-optimized.cjs&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./wrapper-node-process-env.cjs&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;development&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-with-devtools.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;production&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-optimized.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index-optimized.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dep-devdep" tabindex="-1"><a class="header-anchor" href="#dep-devdep" aria-hidden="true">#</a> dep/devDep</h2><p>当进行业务开发时，严格区分 dependencies 与 devDependencies 并无必要</p><p>对于库 (Package) 开发而言，是有严格区分的</p><p>dependencies: 在生产环境中使用<br> devDependencies: 在开发环境中使用，如 webpack/babel/eslint 等<br> 当在项目中安装一个依赖的 Package 时，该依赖的 dependencies 也会安装到项目中，即被下载到 node_modules 目录中。但是 devDependencies 不会</p><p>因此当我们开发 Package 时，需要注意到我们所引用的 dependencies 会被我们的使用者一并下载，而 devDependencies 不会。</p><p>一些 Package 宣称自己是 zero dependencies，一般就是指不依赖任何 dependencies，如 highlight</p><h2 id="engines" tabindex="-1"><a class="header-anchor" href="#engines" aria-hidden="true">#</a> engines</h2><p>控制宿主环境</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=14.0.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="script-hooks" tabindex="-1"><a class="header-anchor" href="#script-hooks" aria-hidden="true">#</a> script hooks</h2><h3 id="npm-script生命周期" tabindex="-1"><a class="header-anchor" href="#npm-script生命周期" aria-hidden="true">#</a> npm script生命周期</h3><p>当我们执行任意 npm run 脚本时，将自动触发 pre/post 的生命周期。</p><p>当手动执行 npm run abc 时，将在此之前自动执行 npm run preabc，在此之后自动执行 npm run postabc。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 自动执行
<span class="token function">npm</span> run preabc
 
<span class="token function">npm</span> run abc
 
// 自动执行
<span class="token function">npm</span> run postabc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>patch-package 一般会放到 postinstall 中。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  postinstall<span class="token operator">:</span> <span class="token string">&quot;patch-package&quot;</span>;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而发包的生命周期更为复杂，当执行 npm publish，将自动执行以下脚本。</p><ul><li>prepublishOnly: 最重要的一个生命周期。</li><li>prepack</li><li>prepare 最常用，比如 husky install</li><li>postpack</li><li>publish</li><li>postpublish</li></ul><p>当然你无需完全记住所有的生命周期，如果你需要在发包之前自动做一些事情，如测试、构建等，请在 prepulishOnly 中完成。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  prepublishOnly<span class="token operator">:</span> <span class="token string">&quot;npm run test &amp;&amp; npm run build&quot;</span>;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="风险" tabindex="-1"><a class="header-anchor" href="#风险" aria-hidden="true">#</a> 风险</h3><p>假设某一个第三方库的 npm postinstall 为 rm -rf</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  postinstall<span class="token operator">:</span> <span class="token string">&quot;rm -rf /&quot;</span>;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，确实有很多 npm package 被攻击后，就是通过 npm postinstall 自动执行一些事，比如挖矿等。</p><p>如果 npm 可以限制某些库的某些 hooks 执行，则可以解决这个问题。</p><h2 id="npm-package-发包" tabindex="-1"><a class="header-anchor" href="#npm-package-发包" aria-hidden="true">#</a> npm package 发包</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  name<span class="token operator">:</span> &#39;demo&#39;<span class="token punctuation">,</span>
  version<span class="token operator">:</span> &#39;<span class="token number">1.0</span>.<span class="token number">0</span>&#39;<span class="token punctuation">,</span>
  main<span class="token operator">:</span> &#39;./index.js&#39;<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如若该包进行更新后，需要再次发包，可 npm version 控制该版本进行升级，记住需要遵守 Semver 规范</p><p>增加一个修复版本号: 1.0.1 -&gt; 1.0.2 (自动更改 package.json 中的 version 字段)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> version patch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>增加一个小的版本号: 1.0.1 -&gt; 1.1.0 (自动更改 package.json 中的 version 字段)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> version minor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将更新后的包发布到 npm 中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实际发包内容取决于files</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  files<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dist&quot;</span><span class="token punctuation">]</span>;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),v={href:"https://npm.devtool.tech/vue",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"第三方库解决潜在间接依赖不可控问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第三方库解决潜在间接依赖不可控问题","aria-hidden":"true"},"#"),s(" 第三方库解决潜在间接依赖不可控问题")],-1),b={href:"https://github.com/vercel/next.js/tree/canary/packages/next/package.json",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/vercel/next.js/tree/canary/packages/next/compiled",target:"_blank",rel:"noopener noreferrer"};function g(q,j){const a=o("ExternalLinkIcon");return t(),i("div",null,[r,d,n("p",null,[s("semver，Semantic Versioning 语义化版本的缩写，文档可见 "),n("a",u,[s("https://semver.org/"),e(a)]),s(" 由[major, minor, patch] 三部分组成，其中")]),k,n("p",null,[s("当你发包成功后，也可以前往 "),n("a",v,[s("npm devtool"),e(a)]),s(" 查看各项数据。")]),m,n("ol",null,[n("li",null,[s("将所有依赖中的版本号在 "),n("a",b,[s("package.json"),e(a)]),s(" 中锁死。")]),n("li",null,[s("将部分依赖直接编译后直接引入，而非通过依赖的方式，如 webpack、babel 等。可见目录 "),n("a",h,[s("next/compiled"),e(a)])])])])}const f=p(c,[["render",g],["__file","007package和npm.html.vue"]]);export{f as default};
