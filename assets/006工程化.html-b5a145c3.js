import{_ as e,o as a,c as s,e as n}from"./app-72993491.js";const p={},r=n(`<h1 id="工程化" tabindex="-1"><a class="header-anchor" href="#工程化" aria-hidden="true">#</a> 工程化</h1><p>前端工程化，就是指对前端进行一些流程的标准化，让开发变得更有效率，且更好地做产品交付。</p><h2 id="介绍一下webpack-vite-gulp-rollup-rspack-你最喜欢用哪个-作业帮" tabindex="-1"><a class="header-anchor" href="#介绍一下webpack-vite-gulp-rollup-rspack-你最喜欢用哪个-作业帮" aria-hidden="true">#</a> 介绍一下webpack，Vite，gulp，rollup，rspack，你最喜欢用哪个（作业帮）</h2><p>我最喜欢用的是webpack，最期待的是turpopack，因为平时使用的比较多，而且生态比较成熟，所以最喜欢用webpack。先把gulp捡出来单独说下，他与其他这些打包工具不一样，他采用了文件管道流的工具，本身并不对css、js等做处理，也不支持模块化等功能，通过采用一系列的插件来实现模块化的打包。然背后我们再说vite，与剩下的三者相比，比较特殊，vite是bundless的，也就是不打包，或者说生产环境的打包其实是借助了rollup，未来可能会借助swc、esbuild，我们这里先说开发环境，开发环境，vite会使用esbuild先预编译第三方库，因为这些库一般不经常变动，并且将这些库缓存在node_module下一个.vite文件夹里，然后启动一个本地的服务器，加载html，html通过esmodule请求模块，要请求哪个模块，vite就去给他转化成本地路径，然后去请求那个文件，如果请求的文件是sfc文件，那vite就会给他做一下转义，将sfc拆成三部分分别转义再交给浏览器，当然其他的文件也有其他的转义方式，没用到的文件vite就不去做转义。而传统的开发这模式，则是打包工具先去收集入口文件的依赖，比如webpack，分为初始化阶段、构建阶段、生成阶段，初始化阶段分析入口文件，生成配置，标准化配置，创建 Compiler、Compilation 等基础对象，并初始化插件及若干内置工厂、工具类，并最终找到所有entry入口，第二步构建阶段，从entry文件开始调用loader生成代码，然后生成ast树，找到该入口文件的依赖，递归的构建其依赖的代码，从而构造出完整的依赖关系图，摇树可以在这里进行，第三步，生成阶段，根据entry将module封装生成为chunk，chunkGroup，生成chunkGraph,建立起chunk的父子关系，最终输出产物。值得一提的是webpack实现模块化采用的是闭包思想，使用函数对模块进行包裹，webpack提供大量的工具函数，比如webpack_require.r将模块变为esModule，还有加载脚本的等等，所以打包出来的代码往往带着很多额外的代码。rollup在实现模块化时，则直接采用了合并，在合并之前通过ast解析，对重复的变量进行重命名，本身是不会引入工具代码的。所以目前我在打包业务项目时采用的都是webpack，打包库时采用的都是rollup，对于业务代码而言，那一丢丢工具代码的体积不算啥，因为即使你使用rollup打包业务代码也需要引入对应的插件和帮助函数。此外webpack与rollup相比还多了一个loader，专门用来处理资源加载的，loader的执行是有一条链的，先从左往右执行loader的pitch（预执行），然后从右往左执行loader，loader将各种不同的资源加载成js代码形式，同时提供loader Context提供丰富接口满足各种诉求，以及一些工具loader-utils，schema-utils等。webpack的插件系统，则采用发布订阅机制的加强版，为什么说是加强版，因为发布订阅机制是一种松耦合的机制，webpack采用tapable实现事件发布订阅，同时携带了webpack本身上下文的大量信息。然后tapable提供了多种钩子也契合webpack的需求，主要有普通钩子，熔断钩子、异步并行钩子、异行钩子、循环钩子，以及他们的结合体，然后webpack各种钩子也是用的这些钩子，比较常用的钩子像emit就是在输出文件前触发的。整个webpack大概200个钩子。rspack用了下体验还不错，但是有些东西不支持还是挺硬伤的，基本上与webpack差不多，但是源码是用rust写的支持部分js插件和loader，但是有些webpack插件和loader又不支持，在webpack启用swc编译babel的情况下，性能有所提升，大概1/3可能跟项目的复杂程度有关系，或许越复杂会越快，但是如果让我选择我可能更倾向turpopack那种抛弃以前的东西，完全从头来的设计，因为现在这样的有点不上不下更多可能是过度。</p><h2 id="webpack热更新原理-百度" tabindex="-1"><a class="header-anchor" href="#webpack热更新原理-百度" aria-hidden="true">#</a> webpack热更新原理（百度）</h2><p>使用webpack-dev-server托管静态资源，同时注入runtime来处理热更新逻辑，浏览器加载后建立websocket连接，当webpack监听到文件后，增量构建发生变化的模块，并通过websocket发送hash事件，浏览器接收到hash事件后请求mainfest资源文件，确认增量范围，浏览器加载模块，替换，然后运行module.hot.accept的回调，执行代码逻辑，done。值得一提的是module.hot.accept()。如果不传参将会重新加载页面。想要使用热更新就意味你需要写module.hot.accept函数，但是比较幸运的是现在我们有React、Vue这样的框架，他们的运行基本上是规则的，所以他们帮我们写了热更新的逻辑代码，让我获得比较好的开发体验。</p><h2 id="webpack-proxy原理-百度" tabindex="-1"><a class="header-anchor" href="#webpack-proxy原理-百度" aria-hidden="true">#</a> webpack proxy原理（百度）</h2><p>webpack proxy是webpack提供的代理服务，本质行为就是接收客户端发送请求转发给服务端，相当于中间件服务器。你服务器发送请求，客户端发送原生请求，人家服务器又不管，跨域是你浏览器拦截的。</p><h2 id="vue项目你是怎么做环境变量的-百度" tabindex="-1"><a class="header-anchor" href="#vue项目你是怎么做环境变量的-百度" aria-hidden="true">#</a> vue项目你是怎么做环境变量的（百度）</h2><p>webpack通过DefinePlugin来嵌入环境变量，或者通过dotenv写单独的.env文件。vite则可以通过rollup插件实现</p><h2 id="package-json里的peerdependence是什么-如果用户装你的包-会把peer里的包也装上去么-百度" tabindex="-1"><a class="header-anchor" href="#package-json里的peerdependence是什么-如果用户装你的包-会把peer里的包也装上去么-百度" aria-hidden="true">#</a> package.json里的peerDependence是什么，如果用户装你的包，会把peer里的包也装上去么（百度）</h2><p>在npmv3~npmv6的版本中，peerDependencies不是自动安装的。如果在安装的过程中发现没有相关依赖，npm会发出警告。从npmv7开始，peerDependencies将会默认安装。但是你可以将包配置为可选这样就不警告了。</p><h2 id="懒加载和预加载是什么。图片预加载和懒加载都是怎么实现的你-百度" tabindex="-1"><a class="header-anchor" href="#懒加载和预加载是什么。图片预加载和懒加载都是怎么实现的你-百度" aria-hidden="true">#</a> 懒加载和预加载是什么。图片预加载和懒加载都是怎么实现的你（百度）</h2><p>懒加载我理解的就是一开始不加载资源直到需要用到资源的时候才去加载资源。预加载就是哪怕这个资源还没用到，我们就得提前把这个资源给加载出来。有几个属性preload，prerender，prefetch优先级从左到右降低，这些都是预加载，preload既加载又执行还优先级高，prerender既加载又执行，prefetch加载但不执行，一般真要预加载用prefetch就够用了。关于图片懒加载和预加载，懒加载就图片进入可视区域我再加载，预加载，就提前加载好图片，建一个图片标签，然后src指向图片地址就行。懒加载还可以抢救下，比如我提前加载个10来个，这样只要从下面滚上来的就带着图上来了。</p><h3 id="webpack预加载" tabindex="-1"><a class="header-anchor" href="#webpack预加载" aria-hidden="true">#</a> webpack预加载</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// prefetch</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPrefetch: true */</span> <span class="token string">&#39;./sub1.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// preload</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPreload: true */</span> <span class="token string">&#39;./sub2.js&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图片预加载" tabindex="-1"><a class="header-anchor" href="#图片预加载" aria-hidden="true">#</a> 图片预加载</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;/static/img/prefetch.jpg&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="视频的预加载" tabindex="-1"><a class="header-anchor" href="#视频的预加载" aria-hidden="true">#</a> 视频的预加载</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>video preload <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token comment">// meta,auto,none</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;preload&quot;</span> <span class="token keyword">as</span><span class="token operator">=</span><span class="token string">&quot;video&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;/static/sample.mp4&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="移动端一像素的边框问题-百度" tabindex="-1"><a class="header-anchor" href="#移动端一像素的边框问题-百度" aria-hidden="true">#</a> 移动端一像素的边框问题（百度）</h2><p>0.5px的border，有些手机可能不支持，可以用border-image、box-shadow、transform+伪类等实现。</p>`,23),c=[r];function t(o,i){return a(),s("div",null,c)}const l=e(p,[["render",t],["__file","006工程化.html.vue"]]);export{l as default};
