const l=JSON.parse('{"key":"v-31a57a68","path":"/algorithm/002LinkList.html","title":"链表","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"哈希表","slug":"哈希表","link":"#哈希表","children":[{"level":3,"title":"哈希表","slug":"哈希表-1","link":"#哈希表-1","children":[]},{"level":3,"title":"有序表","slug":"有序表","link":"#有序表","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"课后题","slug":"课后题","link":"#课后题","children":[{"level":3,"title":"判断单链表是否是回文单链表","slug":"判断单链表是否是回文单链表","link":"#判断单链表是否是回文单链表","children":[]},{"level":3,"title":"单链表区分","slug":"单链表区分","link":"#单链表区分","children":[]},{"level":3,"title":"赋值含有随机指针节点的链表 （剑指35）","slug":"赋值含有随机指针节点的链表-剑指35","link":"#赋值含有随机指针节点的链表-剑指35","children":[]},{"level":3,"title":"反转单向和双向链表:分别实现反转单向链表和反转双向链表的函数,如果 链表长度为N，时间复杂度要求为0 (N)，额外空间复杂度要求为0(1)","slug":"反转单向和双向链表-分别实现反转单向链表和反转双向链表的函数-如果-链表长度为n-时间复杂度要求为0-n-额外空间复杂度要求为0-1","link":"#反转单向和双向链表-分别实现反转单向链表和反转双向链表的函数-如果-链表长度为n-时间复杂度要求为0-n-额外空间复杂度要求为0-1","children":[]},{"level":3,"title":"打印两个有序链表的公共部分，时间复杂度O(N),额外空间复杂度O(1)","slug":"打印两个有序链表的公共部分-时间复杂度o-n-额外空间复杂度o-1","link":"#打印两个有序链表的公共部分-时间复杂度o-n-额外空间复杂度o-1","children":[]},{"level":3,"title":"两个单链表相交：给定两个可能有环也可能无环的单链表，请实现一个函数，若两个链表相交，返回相交的第一个节点。若不相交，返回null (剑指52)","slug":"两个单链表相交-给定两个可能有环也可能无环的单链表-请实现一个函数-若两个链表相交-返回相交的第一个节点。若不相交-返回null-剑指52","link":"#两个单链表相交-给定两个可能有环也可能无环的单链表-请实现一个函数-若两个链表相交-返回相交的第一个节点。若不相交-返回null-剑指52","children":[]}]}],"git":{"updatedTime":1690381612000},"filePathRelative":"algorithm/002LinkList.md"}');export{l as data};
