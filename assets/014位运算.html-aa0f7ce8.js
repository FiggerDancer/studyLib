import{_ as n,o as s,c as a,e as t}from"./app-72993491.js";const p={},e=t(`<h1 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h1><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><h3 id="_1" tabindex="-1"><a class="header-anchor" href="#_1" aria-hidden="true">#</a> 1</h3><p>给定两个有符号32位整数a和b，返回a和b中较大的</p><p>要求：不用做任何比较判断</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 0变1,1变0
 * <span class="token keyword">@param</span> <span class="token parameter">num</span> 
 * <span class="token keyword">@returns</span> 
 */</span>
<span class="token keyword">function</span> <span class="token function">flip</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">^</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 负数返回0
 * 正数返回1
 * <span class="token keyword">@param</span> <span class="token parameter">num</span> 
 * <span class="token keyword">@returns</span> 
 */</span>
<span class="token keyword">function</span> <span class="token function">sign</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getMax1</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// a-b有溢出的可能</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b
    <span class="token keyword">const</span> scA <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// a-b为非负，scA为1；a-b位负，scA为0</span>
    <span class="token keyword">const</span> scB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>scA<span class="token punctuation">)</span> <span class="token comment">// scA为0，scB为1，scA为1，scB为0，scA为0，scb为1，scA为1，scB为0</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> scA <span class="token operator">+</span> b <span class="token operator">*</span> scB<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b
    <span class="token keyword">const</span> sa <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">const</span> sb <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token keyword">const</span> sc <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">const</span> diffSab <span class="token operator">=</span> sa <span class="token operator">^</span> sb <span class="token comment">// a和b符号不一样返回1，否则0</span>
    <span class="token keyword">const</span> sameSab <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>diffSab<span class="token punctuation">)</span>
    <span class="token comment">// a，b同符号 a - b &gt;= 0 返回a 转化成代码 diffSab * sa</span>
    <span class="token comment">// a和b符号不同，并且a大于0，返回a 转化成代码 sameSab * sc</span>
    <span class="token comment">// diffSab和sameSab一定互斥，所以 diffSab * sa + sameSab * sc</span>
    <span class="token keyword">const</span> returnA <span class="token operator">=</span> diffSab <span class="token operator">*</span> sa <span class="token operator">+</span> sameSab <span class="token operator">*</span> sc
    <span class="token keyword">const</span> returnB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>returnA<span class="token punctuation">)</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> returnA <span class="token operator">+</span> b <span class="token operator">*</span> returnB<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断一个32位正数是不是2的幂、4的幂" tabindex="-1"><a class="header-anchor" href="#判断一个32位正数是不是2的幂、4的幂" aria-hidden="true">#</a> 判断一个32位正数是不是2的幂、4的幂</h3><p>2的幂特点只有一个1</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">judge2</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取反+1，按位与，与原先比较</span>
    <span class="token comment">// return (n &amp; (~n + 1)) === n</span>
    <span class="token comment">// -1 按位与，-1后所有的位都变除符号位</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4的幂首先是2的幂，所以只有1个1，而且这个1只在010101位</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">judge4</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取反+1，按位与，与原先比较</span>
    <span class="token comment">// return (n &amp; (~n + 1)) === n</span>
    <span class="token comment">// -1 按位与，-1后所有的位都变除符号位</span>
    <span class="token keyword">const</span> is2 <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>
    <span class="token comment">// ...010101010101</span>
    <span class="token keyword">return</span> is2 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="给定两个有符号32位整数a和b-不能使用四则运算符-实现加减乘除" tabindex="-1"><a class="header-anchor" href="#给定两个有符号32位整数a和b-不能使用四则运算符-实现加减乘除" aria-hidden="true">#</a> 给定两个有符号32位整数a和b，不能使用四则运算符，实现加减乘除</h3><p>^异或，无进位相加 &amp;求与，</p><table><thead><tr><th>操作</th><th>数</th><th>备注</th></tr></thead><tbody><tr><td>13:</td><td>01101</td><td></td></tr><tr><td>7:</td><td>00111</td><td></td></tr><tr><td>^</td><td>01010</td><td>无进位相加结果</td></tr><tr><td>&amp;</td><td>01010</td><td>进位结果</td></tr><tr><td>&amp;&lt;&lt;1</td><td>01010</td><td>相当于要加</td></tr></tbody></table><table><thead><tr><th>操作</th><th>数</th><th>备注</th></tr></thead><tbody><tr><td>无进位相加结果</td><td>01010</td><td></td></tr><tr><td>进位要加的数</td><td>01010</td><td></td></tr><tr><td>^</td><td>00000</td><td>无进位相加结果</td></tr><tr><td>&amp;&lt;&lt;1</td><td>10100</td><td>进位结果</td></tr></tbody></table><table><thead><tr><th>操作</th><th>数</th><th>备注</th></tr></thead><tbody><tr><td>无进位相加结果</td><td>00000</td><td></td></tr><tr><td>进位要加的数</td><td>10100</td><td></td></tr><tr><td>^</td><td>10100</td><td>无进位相加结果</td></tr><tr><td>&amp;&lt;&lt;1</td><td>00000</td><td>进位结果，现在没有进位结果</td></tr></tbody></table><p>不停地异或，直到无进位了，总有进位消失的时候</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> a
    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">=</span> a <span class="token operator">^</span> b
        b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>
        a <span class="token operator">=</span> sum
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">negNum</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">~</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">negNum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">multi</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// b的最后一位是否为0，是0则不加，是1则加上</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// a向左移</span>
        a  <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>
        <span class="token comment">// b向右移,无符号</span>
        b <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isNeg</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">&lt;</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">isNeg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> a
    <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">isNeg</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">:</span> b
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token function">minus</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>
            x <span class="token operator">=</span> <span class="token function">minus</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">isNeg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">isNeg</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token function">negNum</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","014位运算.html.vue"]]);export{r as default};
