import{_ as i,r as l,o,c,b as n,d as s,a as e,e as a}from"./app-72993491.js";const p={},d=a(`<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><h2 id="css变量解决了什么问题" tabindex="-1"><a class="header-anchor" href="#css变量解决了什么问题" aria-hidden="true">#</a> CSS变量解决了什么问题</h2><ol><li>css变量减少样式重复定义，比如同一个颜色值要在多个地方重复使用，方便维护，提高可读性</li><li>可以减少 JavaScript 对 DOM 的介入，制作性能更高的动画</li><li>配合 content 等通过 CSS 给 JS 传参，得到一些通过 JavaScript 难以获取的参数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;box&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 读取变量</span>
doucment<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">&#39;--color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//pink</span>
<span class="token comment">// 删除变量</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">removeProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--color&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何避免css样式冲突" tabindex="-1"><a class="header-anchor" href="#如何避免css样式冲突" aria-hidden="true">#</a> 如何避免CSS样式冲突</h2><p>css scoped、bem、css module</p><h2 id="哪些css元素可以改变层叠上下文-作业帮" tabindex="-1"><a class="header-anchor" href="#哪些css元素可以改变层叠上下文-作业帮" aria-hidden="true">#</a> 哪些CSS元素可以改变层叠上下文（作业帮）</h2><p>常见的:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>布局</td><td><code>position: fixed; position: absolute; position: sticky;</code></td></tr><tr><td>透明度</td><td><code>opacity</code>小于1</td></tr><tr><td>z-index</td><td>grid、flex子元素<code>z-index</code>不为auto</td></tr><tr><td>位移</td><td>transform</td></tr><tr><td>常用来优化的</td><td>will-change、isolation</td></tr></tbody></table>`,9),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context",target:"_blank",rel:"noopener noreferrer"},u=a('<h2 id="与-选择器有什么不同" tabindex="-1"><a class="header-anchor" href="#与-选择器有什么不同" aria-hidden="true">#</a> &#39;+&#39; 与 &#39;~&#39; 选择器有什么不同</h2><ul><li>+ 选择器匹配紧邻的兄弟元素</li><li>~ 选择器匹配随后的所有兄弟元素</li></ul><h2 id="bfc" tabindex="-1"><a class="header-anchor" href="#bfc" aria-hidden="true">#</a> BFC</h2><p>BFC就是块级上下文，是页面盒模型布局中的一种css渲染模式，相当于一个独立的容器，里面和外面的元素互不影响。</p><ol><li>内部box会在垂直方向上，一个一个地放置。</li><li>Box垂直方向的距离由margin决定，在一个BFC中，两个相邻的块级盒子的垂直外边距会产生折叠。</li><li>BFC中，每个盒子的左外边缘margin-left会触碰到容器的左边缘border-left</li><li>形成BFC的区域不会有float box重叠</li><li>计算BFC高度，浮动元素也参与其中</li></ol><h3 id="创建bfc的方式" tabindex="-1"><a class="header-anchor" href="#创建bfc的方式" aria-hidden="true">#</a> 创建BFC的方式</h3>',6),h=n("li",null,"html根元素",-1),k=n("li",null,"float浮动",-1),b=n("li",null,"绝对定位、fixed、sticky",-1),v=n("li",null,"overflow不为visiable",-1),m=n("li",null,"display为表格布局或者弹性布局",-1),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context",target:"_blank",rel:"noopener noreferrer"},x=a(`<h3 id="bfc作用" tabindex="-1"><a class="header-anchor" href="#bfc作用" aria-hidden="true">#</a> BFC作用</h3><ol><li>清除浮动</li><li>防止同一BFC容器中的相邻元素间的外边距重叠问题</li><li>左图右文</li><li>利用特性5解决浮动元素的父元素高度塌陷问题</li></ol><h2 id="div水平垂直居中-作业帮" tabindex="-1"><a class="header-anchor" href="#div水平垂直居中-作业帮" aria-hidden="true">#</a> div水平垂直居中（作业帮）</h2><ol><li>flex margin</li><li>flex justify-content,align-items</li><li>absolute transform</li><li>grid place-item</li></ol><h2 id="opacity-visibility-hidden-display-none区别" tabindex="-1"><a class="header-anchor" href="#opacity-visibility-hidden-display-none区别" aria-hidden="true">#</a> opacity,visibility:hidden,display:none区别</h2><p>联系：他们都能让元素不可见</p><table><thead><tr><th></th><th>区别</th><th>应用</th></tr></thead><tbody><tr><td>opacity:0</td><td>会生成新的层叠上下文，子孙也看不见，性能消耗较低</td><td>可以用来当透明遮罩，防止用户点击下面的元素</td></tr><tr><td>visibility:hidden</td><td>会渲染在dom上，正常占位，继承，而且子孙可以visible，性能消耗低</td><td>可以放到屏幕外</td></tr><tr><td>display:none</td><td>在渲染树中完全消失，不占位，性能消耗大，回流</td><td></td></tr></tbody></table><h2 id="单行溢出" tabindex="-1"><a class="header-anchor" href="#单行溢出" aria-hidden="true">#</a> 单行溢出</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.css</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多行溢出" tabindex="-1"><a class="header-anchor" href="#多行溢出" aria-hidden="true">#</a> 多行溢出</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.4em<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 4.2em<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">div::after</span><span class="token punctuation">{</span>
 <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> 
 <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> 
 <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span> 
 <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css有哪些定位-美图" tabindex="-1"><a class="header-anchor" href="#css有哪些定位-美图" aria-hidden="true">#</a> CSS有哪些定位（美图）</h2><p>absolute,fixed,sticky,relative,static.</p><p>其中static是默认值，也就是正常的文档流形式，而absolute，fixed，sticky，他们都会移出正常的文档流，absolute、relative相对最近的非static元素偏移。fixed相对于页面偏移。sticky相对于最近的具有滚动机制祖先元素偏移。fixed和sticky都会创建一个层叠上下文</p><h2 id="什么是css盒模型" tabindex="-1"><a class="header-anchor" href="#什么是css盒模型" aria-hidden="true">#</a> 什么是CSS盒模型</h2><p>在CSS中我们广泛使用两种盒子-块级盒子和内联盒子，这两种盒子在页面流和元素间会表现出同步的行为</p><h3 id="一般定义成块级盒子会表现出下列行为-bfc" tabindex="-1"><a class="header-anchor" href="#一般定义成块级盒子会表现出下列行为-bfc" aria-hidden="true">#</a> 一般定义成块级盒子会表现出下列行为（BFC）</h3><ol><li>盒子会在内联方向上扩展占据父容器在该方向上的所有可用空间，绝大多数情况盒子会和父容器一样宽</li><li>每个盒子都会换行</li><li>width和height属性可以发挥作用</li><li>内边距（padding），外边距（margin）和边框（border）会将其他元素从当前盒子周围推开。</li></ol><h3 id="一个盒子对外显示inline-那么他的行为如下" tabindex="-1"><a class="header-anchor" href="#一个盒子对外显示inline-那么他的行为如下" aria-hidden="true">#</a> 一个盒子对外显示inline，那么他的行为如下</h3><ol><li>盒子不会产生换行</li><li>width和height属性将不起作用</li><li>垂直方向的内边距、外边距及边框会被应用，但不会把其他inline盒子推开</li><li>竖屏方向的内边距、外边距及边框会被应用，且会把其他inline状态盒子推开</li></ol><h3 id="内部和外部显示类型" tabindex="-1"><a class="header-anchor" href="#内部和外部显示类型" aria-hidden="true">#</a> 内部和外部显示类型</h3><p>css的盒子模型有一个外部显示类型一个内部显示类型，决定盒子是块级还是内联。flex外部块级盒子，内部使用弹性盒子布局。</p>`,22);function y(g,_){const t=l("ExternalLinkIcon");return o(),c("div",null,[d,n("p",null,[n("a",r,[s("层叠上下文"),e(t)])]),u,n("ol",null,[h,k,b,v,m,n("li",null,[s("行内块元素、网格布局、contain值为layout、content或 strict的元素等，"),n("a",f,[s("更多"),e(t)])])]),x])}const C=i(p,[["render",y],["__file","001CSS.html.vue"]]);export{C as default};
