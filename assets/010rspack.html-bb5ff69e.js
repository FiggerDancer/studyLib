import{_ as t,o as e,c as a,e as d}from"./app-72993491.js";const r={},s=d('<h1 id="rspack初体验-2023-8-21" tabindex="-1"><a class="header-anchor" href="#rspack初体验-2023-8-21" aria-hidden="true">#</a> Rspack初体验 2023/8/21</h1><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>我使用webpack+babel时，打包速度为60+s。使用webpack+swc为8-9s。使用Rspack也为6-8s。相对简单的项目，目前的Rspack相对于webpack并无性能上的太大优势。过去使用webpack性能劣势主要也是在babel和sass-loader、postcss-loader上。当然Rspack应该还有很大的上升空间。但是现在在性能差不多的情况下，webpack的功能比Rspack更强大。Rspack目前在很多方面还不够好。以我做实验的这个简单项目来说，在tsx中引入vue3的组件会导致运行时报错，分包中的name不支持输入函数，编译降级时使用mode不能为usage，缺少zip-webpack-plugin等价插件</p><h2 id="关于插件使用" tabindex="-1"><a class="header-anchor" href="#关于插件使用" aria-hidden="true">#</a> 关于插件使用</h2><p>官方描述鉴于webpack插件大部分使用js编写，往往成为性能瓶颈，因此内置了大部分功能。</p><table><thead><tr><th></th><th>webpack</th><th>Rspack</th></tr></thead><tbody><tr><td>html</td><td>html-webpack-plugin</td><td>builtins.html</td></tr><tr><td>copy</td><td>copy-webpack-plugin</td><td>builtins.copy</td></tr><tr><td>progress</td><td>progress-plugin</td><td>builtins.progress</td></tr><tr><td>clean</td><td>clean-webpack-plugin</td><td>output.clean</td></tr><tr><td>minify</td><td>terser-webpack-plugin</td><td>@rspack/plugin-minify</td></tr><tr><td>extra-css</td><td>extra-mini-css-plugin</td><td>自动</td></tr><tr><td>zip</td><td>zip-webpack-plugin</td><td>无</td></tr><tr><td>speed</td><td>speed-measure-webpack-plugin</td><td>不支持</td></tr><tr><td>analyzer</td><td>webpack-bundle-analyzer</td><td>不支持</td></tr><tr><td>unused</td><td>unused-webpack-plugin</td><td>不支持</td></tr></tbody></table><h2 id="配置项变化" tabindex="-1"><a class="header-anchor" href="#配置项变化" aria-hidden="true">#</a> 配置项变化</h2><ol><li>extra-css没有插件，导致导出css文件，需要在output中配置 cssFilename, cssChunkFilename</li><li>可以直接在builtins中配置presetEnv进行兼容性配置，同时设置target</li><li>不支持performance 性能测算</li><li>splitChunks.cacheGroups.{cacheGroup}.name 不支持函数</li></ol>',8),c=[s];function p(i,n){return e(),a("div",null,c)}const h=t(r,[["render",p],["__file","010rspack.html.vue"]]);export{h as default};
