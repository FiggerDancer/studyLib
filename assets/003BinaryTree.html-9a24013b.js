import{_ as p,r as c,o as l,c as i,a as t,w as e,e as o,b as n,d as s}from"./app-72993491.js";const u={},r=o(`<h1 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h1><h2 id="课堂" tabindex="-1"><a class="header-anchor" href="#课堂" aria-hidden="true">#</a> 课堂</h2><h3 id="递归序" tabindex="-1"><a class="header-anchor" href="#递归序" aria-hidden="true">#</a> 递归序</h3><p>每个节点都会走3遍</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> 
    <span class="token punctuation">}</span>
    <span class="token comment">// 1 先序</span>
    <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token comment">// 2 中序</span>
    <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token comment">// 3 后序</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="先序遍历-深度遍历" tabindex="-1"><a class="header-anchor" href="#先序遍历-深度遍历" aria-hidden="true">#</a> 先序遍历 (深度遍历)</h3><p>先序先打印头节点=&gt;左子树所有节点=&gt;右子树所有节点<br> 也就是递归序第一次来到这个节点时处理</p>`,7),k=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"preOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("tree"),n("span",{class:"token punctuation"},","),s(" list "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("tree "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    list`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token function"},"preOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" list"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token function"},"preOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" list"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` list
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),d=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"preOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"tree"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" list "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("tree"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" top "),n("span",{class:"token operator"},"="),s(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        list`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` list
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("h3",{id:"中序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#中序遍历","aria-hidden":"true"},"#"),s(" 中序遍历")],-1),m=n("p",null,"中序:左 => 头 => 右 也就是递归序第二次来到这个节点时处理",-1),b=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"inOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("tree"),n("span",{class:"token punctuation"},","),s(" list "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("tree "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token function"},"inOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" list"),n("span",{class:"token punctuation"},")"),s(`
    list`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token function"},"inOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" list"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` list
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"inOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"tree"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" stk "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 找到一颗树，先把它的左节点全都放到栈中去"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"||"),s(" stk"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            stk`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 依次弹出节点"),s(`
        root `),n("span",{class:"token operator"},"="),s(" stk"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 对弹出节点的右树重复"),s(`
        root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("h3",{id:"后序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#后序遍历","aria-hidden":"true"},"#"),s(" 后序遍历")],-1),f=n("p",null,"后序:左 => 右 => 头 也就是递归序第三次来到这个节点时处理",-1),w=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"postOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("tree"),n("span",{class:"token punctuation"},","),s(" list "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("tree "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token function"},"postOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" list"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token function"},"postOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" list"),n("span",{class:"token punctuation"},")"),s(`
    list`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` list
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"postOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"tree"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"let"),s(` prev
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"||"),s(" stack"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 找到一颗树，先把它的左节点全都放到栈中去"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(`
            root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s(`left
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 依次弹出节点"),s(`
        root `),n("span",{class:"token operator"},"="),s(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token comment"},"// 如果该节点存在右节点，则需要将其有节点放入栈中，重复执行"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},"."),s("right "),n("span",{class:"token operator"},"||"),s(" root"),n("span",{class:"token punctuation"},"."),s("right "),n("span",{class:"token operator"},"==="),s(" prev"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 不存在右节点或右节点等于上个节点，"),s(`
            `),n("span",{class:"token comment"},"// 因为从右节点往上走的时候要判断存不存在右节点，"),s(`
            `),n("span",{class:"token comment"},"// 但这里虽然存在，但是已经处理过了"),s(`
            res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
            prev `),n("span",{class:"token operator"},"="),s(` root
            root `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(`
            root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s(`right
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` res
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("h3",{id:"层序遍历-剑指104",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#层序遍历-剑指104","aria-hidden":"true"},"#"),s(" 层序遍历 (剑指104)")],-1),E=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"levelOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" list "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" queue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("root"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("queue"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" head "),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shift"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        list`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` list
`),n("span",{class:"token punctuation"},"}"),s(`
   
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"levelOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" queue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("root"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("queue"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" currentLevelSize "),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),s(`length
        res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" level "),n("span",{class:"token operator"},"="),s(" res"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" currentLevelSize"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"const"),s(" head "),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shift"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
            res`),n("span",{class:"token punctuation"},"["),s("level"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` res
`),n("span",{class:"token punctuation"},"}"),s(`
   
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("h2",{id:"课后题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#课后题","aria-hidden":"true"},"#"),s(" 课后题")],-1),j=n("h3",{id:"如何完成二叉树的宽度优先遍历-求一颗二叉树的宽度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何完成二叉树的宽度优先遍历-求一颗二叉树的宽度","aria-hidden":"true"},"#"),s(" 如何完成二叉树的宽度优先遍历 (求一颗二叉树的宽度)")],-1),N=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getWidth"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" queue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("root"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" levelMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    levelMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" curLevel "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" curLevelNodeCount "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" max "),n("span",{class:"token operator"},"="),s(" Number"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MIN_SAFE_INTEGER"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("queue"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" head "),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shift"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" curNodeLevel "),n("span",{class:"token operator"},"="),s(" levelMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("curNodeLevel "),n("span",{class:"token operator"},"==="),s(" curLevel"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            curLevelNodeCount`),n("span",{class:"token operator"},"++"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            max `),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("max"),n("span",{class:"token punctuation"},","),s(" curLevelNodeCount"),n("span",{class:"token punctuation"},")"),s(`
            curLevel`),n("span",{class:"token operator"},"++"),s(`
            curLevelNodeCount `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            levelMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" curLevel "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
            queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            levelMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" curLevel "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
            queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` max
`),n("span",{class:"token punctuation"},"}"),s(`
   
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getWidth"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" queue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("root"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" max "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"Infinity"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("queue"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" currentLevelSize "),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),s(`length
        res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" level "),n("span",{class:"token operator"},"="),s(" res"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
        max `),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("max"),n("span",{class:"token punctuation"},","),s(" currentLevelSize"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" currentLevelSize"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"const"),s(" head "),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shift"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
            res`),n("span",{class:"token punctuation"},"["),s("level"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` max
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("h3",{id:"如何判断一颗树是否是搜索二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何判断一颗树是否是搜索二叉树","aria-hidden":"true"},"#"),s(" 如何判断一颗树是否是搜索二叉树")],-1),R=n("p",null,"中序遍历时一定是升序的",-1),D=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"isBST"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("root"),n("span",{class:"token punctuation"},","),s(" prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"Infinity")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),n("span",{class:"token function"},"isBST"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" prev"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<="),s(" prev"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    prev `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s(`val
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"isBST"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" prev"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"isBinarySearchTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"Infinity"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"||"),s(" stack"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(`
            root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s(`left
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" top "),n("span",{class:"token operator"},"="),s(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("prev "),n("span",{class:"token operator"},">="),s(" top"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        prev `),n("span",{class:"token operator"},"="),s(" top"),n("span",{class:"token punctuation"},"."),s(`val
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            root `),n("span",{class:"token operator"},"="),s(" top"),n("span",{class:"token punctuation"},"."),s(`right
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token literal-property property"},"isBST"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token literal-property property"},"min"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"Infinity"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token literal-property property"},"max"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"Infinity"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token literal-property property"},"isBST"),n("span",{class:"token operator"},":"),s(" isLeftBST"),n("span",{class:"token punctuation"},","),s(`
        max`),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token literal-property property"},"isBST"),n("span",{class:"token operator"},":"),s(" isRightBST"),n("span",{class:"token punctuation"},","),s(`
        min
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" newMax "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("max"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" newMin "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),s("min"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" isBST "),n("span",{class:"token operator"},"="),s(" isLeftBST "),n("span",{class:"token operator"},"&&"),s(" isRightBST "),n("span",{class:"token operator"},"&&"),s(" max "),n("span",{class:"token operator"},"<"),s(" root"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"&&"),s(" root"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<"),s(` min
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
        isBST`),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token literal-property property"},"max"),n("span",{class:"token operator"},":"),s(" newMax"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token literal-property property"},"min"),n("span",{class:"token operator"},":"),s(` newMin
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"isBST"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s(`isBST
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("h3",{id:"如何判断一颗树是否是完全二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何判断一颗树是否是完全二叉树","aria-hidden":"true"},"#"),s(" 如何判断一颗树是否是完全二叉树")],-1),I=n("p",null,"若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。",-1),S=n("p",null,"利用层序遍历",-1),K=n("ol",null,[n("li",null,"任一节点有右无左 false"),n("li",null,"在不违规条件下，如果遇到了第一个左右子节点补全，后续必须都是叶子节点")],-1),L=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"isCBT"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
    `),n("span",{class:"token comment"},"// 是否遇到过左右两孩子不双全的节点"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" leaf "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" l "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" r "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" queue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("queue"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        head `),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shift"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        l `),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},"."),s(`left
        r `),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},"."),s(`right
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(`
            `),n("span",{class:"token doc-comment comment"},`/**
             * 任一节点有右无左
             */`),s(`
            `),n("span",{class:"token punctuation"},"("),s("l "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"&&"),s(" r "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token doc-comment comment"},`/**
             * 不是叶子节点（有孩子）
             */`),s(`
            `),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token punctuation"},"("),s("leaf "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("l "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"||"),s(" r "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
            
        `),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("l "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("l"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("r "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("r"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("l "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"||"),s(" r "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 遇到了第一个左右子节点补全，后续必须都是叶子节点"),s(`
            leaf `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("h3",{id:"如何判断一棵树是否是满二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何判断一棵树是否是满二叉树","aria-hidden":"true"},"#"),s(" 如何判断一棵树是否是满二叉树")],-1),_=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token literal-property property"},"height"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token literal-property property"},"nodeCount"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token literal-property property"},"height"),n("span",{class:"token operator"},":"),s(" leftHeight"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token literal-property property"},"nodeCount"),n("span",{class:"token operator"},":"),s(" leftNodeCount"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token literal-property property"},"height"),n("span",{class:"token operator"},":"),s(" rightHeight"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token literal-property property"},"nodeCount"),n("span",{class:"token operator"},":"),s(" rightNodeCount"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" height "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("leftHeight"),n("span",{class:"token punctuation"},","),s(" rightHeight"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" nodeCount "),n("span",{class:"token operator"},"="),s(" leftNodeCount "),n("span",{class:"token operator"},"+"),s(" rightNodeCount "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
        height`),n("span",{class:"token punctuation"},","),s(`
        nodeCount`),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"isFullBinaryTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(`
        height`),n("span",{class:"token punctuation"},","),s(`
        nodeCount`),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" fullCount "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(" height"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" fullCount "),n("span",{class:"token operator"},"==="),s(` nodeCount
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("h3",{id:"如何判断一棵树是否是平衡二叉树-力扣110",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何判断一棵树是否是平衡二叉树-力扣110","aria-hidden":"true"},"#"),s(" 如何判断一棵树是否是平衡二叉树 (力扣110)")],-1),W=n("p",null,"对于任何一个子树来说，它的左树和右树的高度差不能超过1",-1),J=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token literal-property property"},"isBalanced"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token literal-property property"},"height"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token literal-property property"},"isBalanced"),n("span",{class:"token operator"},":"),s(" isLeftBalanced"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token literal-property property"},"height"),n("span",{class:"token operator"},":"),s(` leftHeight
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token literal-property property"},"isBalanced"),n("span",{class:"token operator"},":"),s(" isRightBalanced"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token literal-property property"},"height"),n("span",{class:"token operator"},":"),s(` rightHeight
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" height "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("leftHeight"),n("span",{class:"token punctuation"},","),s(" rightHeight"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" isBalanced "),n("span",{class:"token operator"},"="),s(" isLeftBalanced "),n("span",{class:"token operator"},"&&"),s(" isRightBalanced "),n("span",{class:"token operator"},"&&"),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"abs"),n("span",{class:"token punctuation"},"("),s("leftHeight "),n("span",{class:"token operator"},"-"),s(" rightHeight"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
        isBalanced`),n("span",{class:"token punctuation"},","),s(`
        height`),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"isBalanceBinaryTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"helper"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s(`isBalanced
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("h3",{id:"给定两个二叉树的节点node1-和-node2-找到他们的最低公共祖先节点-剑指68",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#给定两个二叉树的节点node1-和-node2-找到他们的最低公共祖先节点-剑指68","aria-hidden":"true"},"#"),s(" 给定两个二叉树的节点node1 和 node2，找到他们的最低公共祖先节点 （剑指68）")],-1),Y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"lowestCommonAncestor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("root"),n("span",{class:"token punctuation"},","),s(" node1"),n("span",{class:"token punctuation"},","),s(" node2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" parentMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("root"),n("span",{class:"token punctuation"},"]"),s(`
    parentMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" top "),n("span",{class:"token operator"},"="),s(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            parentMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" top"),n("span",{class:"token punctuation"},")"),s(`
            stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            parentMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" top"),n("span",{class:"token punctuation"},")"),s(`
            stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("top"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"const"),s(" st1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    st1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("node1"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" cur "),n("span",{class:"token operator"},"="),s(` node1
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("cur "),n("span",{class:"token operator"},"!=="),s(" parentMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        st1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),s(`
        cur `),n("span",{class:"token operator"},"="),s(" parentMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    st1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(`

    cur `),n("span",{class:"token operator"},"="),s(` node2
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("st1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(` cur
        `),n("span",{class:"token punctuation"},"}"),s(`
        cur `),n("span",{class:"token operator"},"="),s(" parentMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` root
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("p",null,"方法二: 不使用哈希表",-1),z=n("p",null,"情况分析:",-1),G=n("ol",null,[n("li",null,"O1是O2的最低公共祖先，获O2是O1的最低公共最先"),n("li",null,"O1和O2彼此不互为公共祖先，需要向上搜索找到")],-1),F=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},`/**
 * 为什么可以这么做，因为有个前提得条件  node1 和 node2 都一定存在于树里
 */`),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"lowestCommonAncestor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("root"),n("span",{class:"token punctuation"},","),s(" node1"),n("span",{class:"token punctuation"},","),s(" node2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 如果root为空则说明下方不可能有node2或者node1 直接返回
     * 如果root为node1获node2则直接返回
     */`),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"||"),s(" root "),n("span",{class:"token operator"},"==="),s(" node1 "),n("span",{class:"token operator"},"||"),s(" root "),n("span",{class:"token operator"},"==="),s(" node2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// base case"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` root
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token doc-comment comment"},`/**
     * 左树要答案，如果既没有node1又没有node2，则势必返回null，右树同
     * 但是假设其中一树返回空，则说明node1和node2都在同一树中
     * 答案肯定在不空的里
     */`),s(`
    `),n("span",{class:"token keyword"},"const"),s(" left "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"lowestCommonAncestor"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" node1"),n("span",{class:"token punctuation"},","),s(" node2"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" right "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"lowestCommonAncestor"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" node1"),n("span",{class:"token punctuation"},","),s(" node2"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 左右都不为空，此时只有一种可能性，它的下方一定有node1和node2."),s(`
    `),n("span",{class:"token comment"},"// 而如果它有其他兄弟节点，势必会返回null"),s(`
    `),n("span",{class:"token comment"},"// 层层往上一定会返回它本身，也就是这个最近祖先节点"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("left "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"&&"),s(" right "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` root
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" left "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"?"),s(" left "),n("span",{class:"token operator"},":"),s(` right
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("h3",{id:"在二叉树中找到一个节点的后继节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在二叉树中找到一个节点的后继节点","aria-hidden":"true"},"#"),s(" 在二叉树中找到一个节点的后继节点")],-1),Z=n("p",null,[s("后续节点：中序遍历中一个节点的后面的节点"),n("br"),s(" 前驱节点：中序遍历中一个节点的前面的节点")],-1),X=n("ol",null,[n("li",null,"x有右树的时候，它的后继节点是它右树上的最左节点"),n("li",null,"x无右树的时候，往上走一直到这个节点是父亲的左节点时，我们称之为Y，Y的父节点就是后继节点，如果不存在那就是null")],-1),$=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getLeftMost"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` node
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("left "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s(`left
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` node
`),n("span",{class:"token punctuation"},"}"),s(`
  
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getSuccessorNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` node
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 有右子树，它的后继节点是它右树上的最左节点
     */`),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("right "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"getLeftMost"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 无右子树，往上走一直到这个节点是父亲的左节点时，我们称之为Y，Y的父节点就是后继节点，如果不存在那就是null"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" parent "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s(`parent
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("parent "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"&&"),s(" parent"),n("span",{class:"token punctuation"},"."),s("left "),n("span",{class:"token operator"},"!=="),s(" node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 当前节点时父亲节点右孩子"),s(`
        node `),n("span",{class:"token operator"},"="),s(` parent
        parent `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s(`parent
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` parent
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),nn=o('<h3 id="二叉树的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#二叉树的序列化和反序列化" aria-hidden="true">#</a> 二叉树的序列化和反序列化</h3><p>就是内存里的一棵树如何变成字符串形式，又如何从字符串形式变成内存里的树<br> 如何判断一棵二叉树是不是另一棵二叉树的子树？ 可以字符串匹配了</p><h3 id="折叠n次-从上到下-打印所有折痕的方向-微软" tabindex="-1"><a class="header-anchor" href="#折叠n次-从上到下-打印所有折痕的方向-微软" aria-hidden="true">#</a> 折叠N次，从上到下，打印所有折痕的方向（微软）</h3><p>可以感觉出来二叉树的感觉，第一次一个凹折痕<br> 第二次折：上方多一个凹折痕，下方多一个凸折痕<br> 第三次：上次出现的两条折痕，上下方各出现一条折痕（共4条）上折痕都是凹，下折痕都是凸</p><p>你会发现，总的头节点凹折痕，每一棵左子树都为凹折痕，每一棵右子树都为凸折痕</p><p>想要打印所有折痕方向，可以中序遍历（左中右）</p>',6),sn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("n"),n("span",{class:"token punctuation"},","),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" down "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token constant"},"N"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},","),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("down "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'凹'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'凸'"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},","),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),an=o(`<h2 id="树形dp套路" tabindex="-1"><a class="header-anchor" href="#树形dp套路" aria-hidden="true">#</a> 树形dp套路</h2><p>树形dp套路<br> 树形dp套路使用前提：如果题目求解目标是S规则，则求解流程可以定成以每一个节点为头节点的子树在s规则下的每一个答案，并且最终答案一定在其中</p><h3 id="二叉树节点最大距离问题" tabindex="-1"><a class="header-anchor" href="#二叉树节点最大距离问题" aria-hidden="true">#</a> 二叉树节点最大距离问题</h3><p>从二叉树的节点a出发，可以向上或者向下走，但沿途的节点只能经过一次，到达节点b时路径上的节点个数叫作a到b的距离，那么二叉树任何两个节点之间都有距离，求整棵树上的最大距离。</p><p>最大距离（整）</p><ol><li>头不参与<br> 左最大距离-<br> 右最大距离-max</li><li>头参与<br> 左高+1+右高-</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TreeNode</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    left<span class="token operator">?</span><span class="token operator">:</span> TreeNode
    right<span class="token operator">?</span><span class="token operator">:</span> TreeNode
    value<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token operator">?</span><span class="token operator">:</span> TreeNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>maxDistance<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            maxDistance<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            height<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token keyword">const</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token keyword">const</span> p1 <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>maxDistance
    <span class="token keyword">const</span> p2 <span class="token operator">=</span> rightInfo<span class="token punctuation">.</span>maxDistance
    <span class="token keyword">const</span> p3 <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> rightInfo<span class="token punctuation">.</span>height
    <span class="token keyword">const</span> maxDistance <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        maxDistance<span class="token punctuation">,</span>
        height<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最大快乐值问题" tabindex="-1"><a class="header-anchor" href="#最大快乐值问题" aria-hidden="true">#</a> 最大快乐值问题</h3><ol><li>X参与<br> X乐+a整棵树a不来的最大快乐值+b整颗树b不来max+c整颗树c不来</li><li>X 不参与<br> max(a整棵树{a来，a不来})+max(b整颗树{b来，b不来})</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Employee</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    happy<span class="token operator">:</span> <span class="token builtin">number</span>
    nexts<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Employee<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            lai<span class="token operator">:</span> x<span class="token punctuation">.</span>happy<span class="token punctuation">,</span>
            bu<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> lai <span class="token operator">=</span> x<span class="token punctuation">.</span>happy
    <span class="token keyword">let</span> bu <span class="token operator">=</span> <span class="token number">0</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">const</span> nextInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
        lai <span class="token operator">+=</span> nextInfo<span class="token punctuation">.</span>bu
        bu <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nextInfo<span class="token punctuation">.</span>lai<span class="token punctuation">,</span> nextInfo<span class="token punctuation">.</span>bu<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        lai<span class="token punctuation">,</span> 
        bu<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">maxHappy</span><span class="token punctuation">(</span>boss<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> headInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>boss<span class="token punctuation">)</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>headInfo<span class="token punctuation">.</span>lai<span class="token punctuation">,</span> headInfo<span class="token punctuation">.</span>bu<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="morris-遍历-线索二叉树" tabindex="-1"><a class="header-anchor" href="#morris-遍历-线索二叉树" aria-hidden="true">#</a> Morris 遍历 (线索二叉树)</h2><p>一种遍历二叉树的方式，并且时间复杂度O(N)，额外空间复杂度O(1)<br> 通过利用原树种大量空闲指针的方式，达到节省空间的目的</p><h3 id="morris遍历细节" tabindex="-1"><a class="header-anchor" href="#morris遍历细节" aria-hidden="true">#</a> Morris遍历细节</h3><p>假设来到当前节点cur，开始时cur来到头节点位置</p><p>1. 如果cur没有左孩子，cur向右移动(cur = cur.right)<br> 2. 如果cur有左孩子，找到左子树上最右的节点mostRight:<br> a.如果mostRight的右指针指向空，让其指向cur，然后cur向左移动(cur = cur.left)<br> b.如果mostRight的右指针指向cur，让其指向null，然后cur向右移动(cur = cur.right)<br> 3. cur为空时遍历停止</p><h3 id="morris遍历实现" tabindex="-1"><a class="header-anchor" href="#morris遍历实现" aria-hidden="true">#</a> Morris遍历实现</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TreeNode</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    left<span class="token operator">?</span><span class="token operator">:</span> TreeNode
    right<span class="token operator">?</span><span class="token operator">:</span> TreeNode
    value<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Options</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    pre<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    inOrder<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    pos<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>node<span class="token operator">?</span><span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> pre<span class="token operator">:</span> TreeNode<span class="token operator">|</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span>
    <span class="token keyword">let</span> next<span class="token operator">:</span> TreeNode<span class="token operator">|</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        next <span class="token operator">=</span> node<span class="token punctuation">.</span>right
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> pre
        pre <span class="token operator">=</span> node
        node <span class="token operator">=</span> next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre 
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">morris</span><span class="token punctuation">(</span>head<span class="token operator">:</span> TreeNode<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
        pre<span class="token punctuation">,</span>
        inOrder<span class="token punctuation">,</span>
        pos<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
    <span class="token keyword">let</span> cur<span class="token operator">:</span> TreeNode<span class="token operator">|</span><span class="token keyword">undefined</span> <span class="token operator">=</span> head
    <span class="token keyword">let</span> mostRight <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left <span class="token comment">// mostRight是cur左孩子</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token keyword">while</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!==</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right
            <span class="token punctuation">}</span>
            <span class="token comment">// mostRight变成cur最右节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mostRight<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 第一次来到cur</span>
                pre <span class="token operator">&amp;&amp;</span> <span class="token function">pre</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 第二次来到cur，只有有左子树才会来第二次</span>
                <span class="token comment">// mostRight.right === cur</span>
                inOrder <span class="token operator">&amp;&amp;</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 后序遍历</span>
                    <span class="token comment">// 第二次来到cur时，逆序左子树的右边界</span>
                    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">pos</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
                        root <span class="token operator">=</span> root<span class="token punctuation">.</span>right
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 恢复原状</span>
                    root <span class="token operator">=</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            pre <span class="token operator">&amp;&amp;</span> <span class="token function">pre</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
            inOrder <span class="token operator">&amp;&amp;</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">pos</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right
        <span class="token punctuation">}</span>
        <span class="token comment">// 恢复原状</span>
        root <span class="token operator">=</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">morris</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    left<span class="token operator">:</span> <span class="token punctuation">{</span>
        value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        left<span class="token operator">:</span> <span class="token punctuation">{</span>
            value<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
            left<span class="token operator">:</span> <span class="token punctuation">{</span>
                value<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            right<span class="token operator">:</span> <span class="token punctuation">{</span>
                value<span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        right<span class="token operator">:</span> <span class="token punctuation">{</span>
            value<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            left<span class="token operator">:</span> <span class="token punctuation">{</span>
                value<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            right<span class="token operator">:</span> <span class="token punctuation">{</span>
                value<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    right<span class="token operator">:</span> <span class="token punctuation">{</span>
        value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        left<span class="token operator">:</span> <span class="token punctuation">{</span>
            value<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
            left<span class="token operator">:</span> <span class="token punctuation">{</span>
                value<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            right<span class="token operator">:</span> <span class="token punctuation">{</span>
                value<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        right<span class="token operator">:</span> <span class="token punctuation">{</span>
            value<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
            left<span class="token operator">:</span> <span class="token punctuation">{</span>
                value<span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            right<span class="token operator">:</span> <span class="token punctuation">{</span>
                value<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
    <span class="token function-variable function">pre</span><span class="token operator">:</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(treeNode.value)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">inOrder</span><span class="token operator">:</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(treeNode.value)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">pos</span><span class="token operator">:</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用morris判断搜索二叉树" tabindex="-1"><a class="header-anchor" href="#使用morris判断搜索二叉树" aria-hidden="true">#</a> 使用Morris判断搜索二叉树</h3><p>对morris进行了一些改造，让其能够遇到false就中断，其实可以提供一个中断的函数，一调用就中断更合适</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TreeNode</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    left<span class="token operator">?</span><span class="token operator">:</span> TreeNode
    right<span class="token operator">?</span><span class="token operator">:</span> TreeNode
    value<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Options</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    pre<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">void</span>
    inOrder<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">void</span>
    pos<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>node<span class="token operator">?</span><span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> pre<span class="token operator">:</span> TreeNode<span class="token operator">|</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span>
    <span class="token keyword">let</span> next<span class="token operator">:</span> TreeNode<span class="token operator">|</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        next <span class="token operator">=</span> node<span class="token punctuation">.</span>right
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> pre
        pre <span class="token operator">=</span> node
        node <span class="token operator">=</span> next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre 
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">morris</span><span class="token punctuation">(</span>head<span class="token operator">:</span> TreeNode<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
        pre<span class="token punctuation">,</span>
        inOrder<span class="token punctuation">,</span>
        pos<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
    <span class="token keyword">let</span> cur<span class="token operator">:</span> TreeNode<span class="token operator">|</span><span class="token keyword">undefined</span> <span class="token operator">=</span> head
    <span class="token keyword">let</span> mostRight <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left <span class="token comment">// mostRight是cur左孩子</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token keyword">while</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!==</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right
            <span class="token punctuation">}</span>
            <span class="token comment">// mostRight变成cur最右节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mostRight<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 第一次来到cur</span>
                pre <span class="token operator">&amp;&amp;</span> <span class="token function">pre</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 第二次来到cur，只有有左子树才会来第二次</span>
                <span class="token comment">// mostRight.right === cur</span>
                <span class="token keyword">const</span> result <span class="token operator">=</span> inOrder <span class="token operator">&amp;&amp;</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
                mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 后序遍历</span>
                    <span class="token comment">// 第二次来到cur时，逆序左子树的右边界</span>
                    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">pos</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
                        root <span class="token operator">=</span> root<span class="token punctuation">.</span>right
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 恢复原状</span>
                    root <span class="token operator">=</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            pre <span class="token operator">&amp;&amp;</span> <span class="token function">pre</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
            <span class="token keyword">const</span> result <span class="token operator">=</span> inOrder <span class="token operator">&amp;&amp;</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">pos</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right
        <span class="token punctuation">}</span>
        <span class="token comment">// 恢复原状</span>
        root <span class="token operator">=</span> <span class="token function">linkListReverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isBST</span><span class="token punctuation">(</span>head<span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token keyword">let</span> preValue <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">morris</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function">inOrder</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">,</span> abort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> preValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
            preValue <span class="token operator">=</span> treeNode<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有关于树的遍历问题morris都是最优解</p><h2 id="何为具有平衡性的树" tabindex="-1"><a class="header-anchor" href="#何为具有平衡性的树" aria-hidden="true">#</a> 何为具有平衡性的树</h2><h2 id="介绍树的左旋" tabindex="-1"><a class="header-anchor" href="#介绍树的左旋" aria-hidden="true">#</a> 介绍树的左旋</h2><h2 id="介绍树的右旋" tabindex="-1"><a class="header-anchor" href="#介绍树的右旋" aria-hidden="true">#</a> 介绍树的右旋</h2>`,24);function tn(en,on){const a=c("CodeDemo");return l(),i("div",null,[r,t(a,{id:"code-demo-19",type:"normal",title:"%E9%80%92%E5%BD%92",code:"eJxtjUEKg0AMRa8SZlWhzAEKc4YeoHZR2kwdCVEyGTfi3dUJCIJ/E5JH/ptdn93DxcJfTQPDKPiUH8pNBfEOlLJCgNe7gbll2JIiVAYhBOBCdJA9glqEbV9s7BV+LLmrb376UGPgpPKEUc13iSX9uzM3Vb20vLncsgISY0KA"},{default:e(()=>[k]),_:1}),t(a,{id:"code-demo-22",type:"normal",title:"%E9%9D%9E%E9%80%92%E5%BD%92",code:"eJyFjkEOwiAQRa8yYYWbHsDEM3gA66Kp04KSgQxTXTS9u0CrrenCWUDy5/0Ho7pHdVTdQK1YTxAYz3xD1sKIBxhrgjStpyjgbDpOcLluwyhN+8hpLiybl7EOQZdV5ZB6MV/V2hQfUm+Ggg/6sAL5pSoM0egEVc/GbXa2g5Ky7Y38aPMsuk91hlZk2nscdn81hdlZlotRBqby55pSpqY3m/dm2A=="},{default:e(()=>[d]),_:1}),v,m,t(a,{id:"code-demo-31",type:"normal",title:"%E9%80%92%E5%BD%92",code:"eJxVjV0Kg0AMhK8S9qlC8QCFPUMPUPtQ2mxNCalks76Id/cnIjpPyXzMzBB+OdxCKvI2+guQ3PWDejFFvAJTNojweFYwNAKzKMHKIMYIUph3skjRior/4xY4FNaMyby1crqcdVdy67x/8QZOMaVve8750Oo0Mi+FcQIp+EEw"},{default:e(()=>[b]),_:1}),t(a,{id:"code-demo-34",type:"normal",title:"%E9%9D%9E%E9%80%92%E5%BD%92",code:"eJyrVsoqVrJSSivNSy7JzM9TyMzzL0pJLdIoKUpN1VSojslTAILk/LziEoWi1GIFW4XoWGtkweKSbGRBfX2FZ537nnZseLKj4eWi6c8WTHy/p+dpa8ezrq6n65qfz2p5un3Zi66m5007n7aueNm899kUkOJnCzqe7Fj7tG83xJDyjMycVAWNovz8EoWaGpAVejmpeeklGXAHoalCEQcBkJaC0uIMiCzUbTAANtcWTAHNTStBkq5FMIE+ebJv7rM1C5/u2fm0fRfE0QhpqCFgi/ILNJDtAIYTwnK9ssQcZEmgsU/X70Q2ExQo/ZuBIfWyvffpkl4MK8CmFGWmZ8AcCnVkUWpJaVEeyDagOFBMqRYAgnGxmA=="},{default:e(()=>[h]),_:1}),y,f,t(a,{id:"code-demo-43",type:"normal",title:"%E9%80%92%E5%BD%92",code:"eJyrVsoqVrJSSivNSy7JzM9TKMgvLvEvSkkt0igpSk3VUcjJLC5RsFWIjtVUqI7JUwCCzDQFsJyCra2tQl5pTg5cBgSKUktKi/Ig/FoIhWqkXk5qWgnEXE2s8kWZ6RmoCkBMvYLS4gyIgrLEHKgExDKwfEwe0DalWgAa6EP9"},{default:e(()=>[w]),_:1}),t(a,{id:"code-demo-46",type:"normal",title:"%E9%9D%9E%E9%80%92%E5%BD%92",code:"eJydUt1OGkEUfpUpV/RG75vsM/QBai8MHYR2s0tmB3uhJhT5WQhgmzQqLW2wQWqMKNGIKwi+zJzZ3StfwZmdDbuAV87NzJy/7zvnOzuJz1biXSKdN1I0axooZ1r0PfmESZISjN+inQ0DiZMyDYsigi2koQ8f4zaLbqa+xKw6pihH8Lb6fc1kdYySxDQp2t1VwWs6NrZoZl5bnvV1xGszsIfMKfj/jnj3x9NDA8o2r9fhct/9VYK7vlcvusV7KJ/5+1P+Uwbzrs2cAbQmUaEY4AKAPAo9l7cyyr/oDThqwSUYpmnk3VvgyWZ/+MUJPNxDdawoRe6wRghk5pIxDJEK/SL/2/GuTsNWBsfQOYODG/WVHdttv1Pw+t9gWIHyiHdqyiXbLZ+qdkWYX21Cr8lr/72TRgSQTaPkm4A+yW5lgnnHfpqmBbqsTEW25DSXuHD7cP52BzU2bjGnzpzzOdOVGvC7y5wxm7TmeTAriCTvdijk40cjKLRlY3aPHw4E2irmS1XZtOI9tv1qw2tP3dJIZYhAYefHV3B37U4OoFdyv4uwKhtXliTFViT32vamviS5nEco+Yu7YOR1PbYGCOsWfv1SBTqsbFV4EUzzxJCMNwxhSuw9AxTEiuM="},{default:e(()=>[g]),_:1}),x,t(a,{id:"code-demo-52",type:"normal",title:"%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BD%86%E4%B8%8D%E5%88%86%E5%B1%82",code:"eJyFkE0OwiAQha8yYYWbHsDEM3gA66Jph4KZDMpPXTS9u1CqNNHEWUDy3vceE2Zx8+IoVOQ+GMtAOCGd3YBOOmvDAeaWIU1v2Qcgk44TXK578RExYlZzYHOe2hCCXK2GkMegP1U1qbEbUrBQXhsV5KEy+bHmHr2WmWumjnamUVBkQlW3fE9prNkVqsjyo8eZUf8vKtRX03Y5DNGlP0yLt1y0lsXyAmlLa48="},{default:e(()=>[E]),_:1}),t(a,{id:"code-demo-55",type:"normal",title:"%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E5%B9%B6%E5%88%86%E5%B1%82",code:"eJyNUstuwjAQ/JVtTkaoUXvt4w8q9dBjkgMKa+zKsmFtgwTi3/FLOAQh4Yut2ZnZ2ZVPzb9tPhru9eik0aBwj+qX1kiMjHELOPUawpEc2EtGCJ0nDd2QK6PR1gXQwvcM23n0GNGoK5WDkAqBpVKrUG+cuPaoytEToXY/McyfPEaTqaLSQ9t2661g3bCYm6RRgjJysg5e4b2yuCFgCh3IQHr7DNfXXeOALpc3Aau/wNX6GswKyR2bZCjpupRiyCGjot2v1IwWd5tKCnnd+PTkHtUjEW9p5weeJDfiOdPMfOhanuUqnyBM2OsM9bo5XwAvaKwh"},{default:e(()=>[B]),_:1}),T,j,t(a,{id:"code-demo-64",type:"normal",title:"%E7%94%A8%E5%93%88%E5%B8%8C%E8%A1%A8",code:"eJyVUl1LwzAU/SuXPnVsFPcq9EGkysD2QQUfrIza3jaVLp35cMLYfzdpbJKuIhooDTnn3nPOTY7BGw8ug1rSUrQ9hQbFU1sJErK+Fws45hTUKnvKBbxLlAgxPGvsxUc6/MAuLfYKpHgAtQsXBh+RiKMYeq5gbSEBpWR3mqEK1/PTrK/wupdUKPjCwbviUx1kcveKLEo32fbh6ibZbrLH5Da5N7QDaTuEcHAcdUgbQWwYZ5tgUalOhsVJW4vRtudEmxg92jRqTKGu9uhtDeGUHsc2yUR8MHAecbl0hBNgx/G8xMROC0EitQ3Vt5q38Qz5Mn73H+XdhAcD01g6qZpi7R6Em5F3vZbmfMHSXve4zLT3khOv7+/SrG3IX7QH3r/ETeeZ+vePoZCM6sHn1BzlNDh9AfCc8+g="},{default:e(()=>[N]),_:1}),t(a,{id:"code-demo-67",type:"normal",title:"%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%93%88%E5%B8%8C%E8%A1%A8",code:"eJyNUstuwyAQ/JWtT0RprPTaxwdUak899OD4YDmLoaK4xUv6iPLvWYwVSKJIQbJAszOzO4Zt8TEU94X0tiXdW+iQ3vWalHB9TzPYrizw0hLETUQckncWlrHQ9nYgxgZ4gqrOsW+PHgMaZFPFIMFn88vo4tlKbTX9xcKP0gZBjJrSoO1IHXony9Y7h5ZecIPmTf8H91yR6DxP+eUHJap6dmpigpqVgRN1sIC7xIrzvTakSj4K/m7PGmemsncgQi7NquUDb49ndEbn86M8aRyFzfqQY1BaksjcpzDVOHQdMwVFuWnMCS1c0VgyKNPF5Sv2SB4j8Zi2u+DpdKeuM43Mi67Tcdqmt8T/eGUZKnZ7IPrAhA=="},{default:e(()=>[M]),_:1}),A,R,t(a,{id:"code-demo-76",type:"normal",title:"%E9%80%92%E5%BD%92",code:"eJyNzj0OwjAMBeCrmEyNBBwA0YWNGcYuFUrAKHKQ41RCVe9OS92fsR5tf0+vNe9kTsZneghGAkyX273gGGUPH3YNlHC4kkdC+VpoK4J+0EOxG34ssJPMBMLZrW5LyjE4r1F29sMo9HVIKrsl4C+bOsC5HOkmqX0nPC71e9WI8fmaKlXUW9P9AItRUyw="},{default:e(()=>[D]),_:1}),t(a,{id:"code-demo-79",type:"normal",title:"%E8%BF%AD%E4%BB%A3",code:"eJxtkDEOwjAMRa9idSoDHACpDGzMsAFDVDkkEDmV44IQcHfSJqKU4sXR9/eznUdxDsWy0C3VYj2BDWtLiu9bVFybHSOW7L3M4HEgiFF7CgJBVH2BCvbHpDoUaBivUZpvSFuyck+Vm7EOoWfA85kaFw7pJObD/PGN9C5SU9MGk+rjao+u+hTBWobqa3imtcU30Zlxvim/SFZD2V+wqjrb4qrcZA9GaZlAKxfw75T8Bbl/DO9EticzPS8f8DFM0Dnl8cJtnB614vUGEq+DCA=="},{default:e(()=>[q]),_:1}),t(a,{id:"code-demo-82",type:"normal",title:"%E5%88%97%E5%8F%AF%E8%83%BD%E6%80%A7",code:"eJyFUs0KwjAMfpW4g0zQPUDRizdBL+pxlyGdi8xMus4fZO9uWktt/cGy0TT5+uVLmntyaBORlB3tNDYElaxPUqWqafQI7jkBLywhHUQes5TUnaLQY7HtfLMVoFUnx3HkiCRgQSUS6tt7rLgKmHwJ9k/TbbuGWh1mdNmwXcpSsxncZEp36mEWlpXVjB39I1zjvnpnRPpOqAw2YiR5WRVXhq0KXWUsJTVywKLPRf2BRfJYpJT/H1grj6G+YBgOA7HmxIlg6m8bj7enrxI+H89Sx/0Tro64B0+v70VO/OXkB8jy/Jwfl9eMRyQkHLvMUljepH8AN4HKJA=="},{default:e(()=>[U]),_:1}),O,I,S,K,t(a,{id:"code-demo-106",type:"normal",title:"CompleteBinaryTree",code:"eJyNU8FOwkAQ/ZWVAykc5G7CRX/Bm3og2NKapmi7jQcgURQBA8JNYzxIokQNRBMTrRbDz3QpnPgFZ3cL3UKITtI082Zn3uybnULswIptxBTbyGItbyDN2trcllQ5s59AhV0DgWkKktY4YsrYNg2ETVvmsVQKjW5eSbs7Oa2S2tt4WCWfXdJ695wH0n8m/bbnNEmrQSpP/u35+LLsl794oi5j+DIKSiMlo1tBOYYCZNi6HiJmBMnmDQujI1u2ZcB39jjK/PVD21J58xw9VjVdRhIP6rKRw+r8WtToUSjC45aqKVgKMhk3hOgJyFRwCNN2GGxqOVXAqU6hx9RJJqMASiLPdT3nhEsxuquDVqPrexBt8WAqCkjQTJrLgOJx6GEt8BLoH5xOk06p9QED4czTQY2SsxFNB/U/yItF4KfDAmZoZEZNcaERQTlqoReRnCnIn5EweGqlqJQhz1K+MGxdYF0oIGq0uoC5uoAgObvpzFsqB1vA37/3feH3ejBfz3nhizBXfNx5hC2YDhqkfeW7fTKsTDru5OxnYTDRwsGGhPsmdBn8IisJWKz0C3pFSaU="},{default:e(()=>[L]),_:1}),C,t(a,{id:"code-demo-112",type:"normal",code:"eJyFUssOgjAQ/JWVE8RH1KMJF02MFz155EK0SA1uTSlRY/h32wKy9QEbkpbd2ZnOtk/vnHsLLynwoLhASFl2ZdKXQqgAnhGCDp6AP3AyJiRThUSaMZEyfkrVAqYjN4/iyFaiQFNqK2W1rZeDwFxRwoYsY4na2D1hJYymvmt+a0gJITUzMZigR0eapUvIAvqULMiRqvg1bBurdHKJ7z5xRFUDGMKMdr61dbPjUgPdw7Sd3xdT6f+y1FiIUH8Rvp8Bz9dFli05xvKxl4y5D+LPALsE3Bk500m0UuPRDugqbv58VJMGMP4wRvBh2CpZC175Areu4TU="},{default:e(()=>[_]),_:1}),Q,W,t(a,{id:"code-demo-121",type:"normal",code:"eJyNkj3PwiAQx7/KPR1Mm0cbdWx0cXLQxTi6YL1aTKUGaKIxfneBVjk0GgkJcC//3wF3jQ4qyqKiEbnmtYASqxPKWNa1TuC6EWAGLyD+Cyx2SNSNFNTiYtWMVUzkuMtAywb7obtEvi91BkNvvrXbbslroTQVpYJcLbDQjzORfshWxj13+04UpvRGqfUnP4FWVuQLSdrlG8oFBKw21YQtmS7TIzvHvtw+FUzgH0Y005dmssNHgF7vtVprcgi2VQQBg5AxgXHLeP9Iz3u7eWcwv2XmRjz75pky44LJy1oifmyiDmjbI6iA9l7qa3Co6HYHWsfX9A=="},{default:e(()=>[J]),_:1}),V,t(a,{id:"code-demo-127",type:"normal",title:"%E5%93%88%E5%B8%8C%E8%A1%A8",code:"eJyNUbtuwzAM/BXWkw0EBpKxgIeic6eOTQfDlh+tQxoSDQ9B/j2irPgRZTAHSSCPdyfyGv2Z6D2qBiy4JYSORmX4ky4Xwg8s7Jt0rIn4AEilOk7XKYHrGcFGQWgY+lwr5K+8hwxQjWBfcbIGGM6Lf1v8EarfqTI3pUax15DTN45N2ymIXWfaKay5mVUXYibRnEA9OdUF0lYQW0Cq27rhTXOoP+MOwuk9PMLzD6ZZ8S2QWyjZqWqPosB2CDq2QM9e2xkf/fi/LbuH22Sal2XsludznWIoBi1gyW7GLfm3LFtZrS2ZzSab3zxopbBaiSMNW2e761a/av+D2c7p2c5GV8YrBE1uQlMSWvGgUfhermeXQ88hBs/ohhzd7nHt80U="},{default:e(()=>[Y]),_:1}),H,z,G,t(a,{id:"code-demo-148",type:"normal",title:"%E6%97%A0%E5%93%88%E5%B8%8C%E8%A1%A8",code:"eJx9U9tOGzEQ/RU3D6iNKiLyiBRVVX8jL22atKmCV8pFfQCkTULKkuYCCOVeIFUJLW2S0qKwuf+M7TVP/YWO7c0uoIC1WntnZ87MnDne9HxIeNY9Pq83iJEXEXNExjoZGrTcJ+MzPq+Lc7rxb1KgzVP4y1p7xLyge0VW3qezKvvSJuMBQlh7G15D9LAgT350k50SU6e9Bu3WaOs7GZXY6cHNbkEk8QVxJIVDyaiGUUz7GE4kX2kbGxp+iUNw1uJP45qWfK4g1eZ/hjYhEpaqUywvop0MO24JZ6jL+jGiRp33r1itRMzPrDIkZhGa4NkplCxBmFHhek5VajWvWAnaO6LN4+WA0o+XrmUoQC+LgE7EHo0gWTMKBAIIp2IxtLWFXINMeN8iWkI+H3rzOhFGIXjZmLDi4WQqjqW7Mm6rbQkD1x2glXfSVveItQ0xJNkCq35lf9p232u0bLhffuFk1Gl+Tuc51Y2oWFjLfwGM7osZKXgy/cRqfZre5b0ZzQ2I2YWZioQyDBhXWIp0leqwIJPA+GHqgKUCINIBVaXyTF+IA5RhFgHIauwocdymNaThRBLFwhFg7WGhrAqHe2q5HR+Pvnv/OID0WIoA8wGKgRgp56KSGTTNut9YdUDLF/I26Nb5Qmn6uaCkl4V+FiIUl8CZhE3PqgPPdXtkEAReguVxheZ26OSE5zNWZijw5KzIpOGOyy3vMiOemU7MvMrl+EnEX3z0EyDI8IT+voRhigttQtk6nx9YZ5DJUGlcIUu+nyyEvLJiE7iwODfxMaXa9rtQL9T3ugIMYvD1bP8HEwg2zA=="},{default:e(()=>[F]),_:1}),P,Z,X,t(a,{id:"code-demo-169",type:"normal",code:"eJytkstOwkAUhl9lZGGEBexNeAN144qEjcEBapqp6SUuCAmpLgBFIS5AbQyJCagRrTcs4OVlZqa48hWc6bSkVdk5m8mc858z37mUYltabDmWN1BOlxQEClBfgXl9VdH0JaRswjgoZRFgR8oDzwDS6TRAhizPPPyoUDdUBLhAGMvi2ilKMhSBSZnlBQt/RYu83uWpIikiqT1bFoVx141cDmqaoq4xxX8wpxIJX5QA1KqRo0cyaNJu6+v1gNzuuqd7pHnoTvrTuumaI9q5Y0amYQLs1JmXWhXy0hPeIE8qypNUpUJxTi98qp9zECHxKGgK0HY3wvdeYRDTZxs7FffsiVTt6ccJdq5nrG51iMcPvIYAkbaHLJBWW3hy4/ZtPNrHzjjDTBmmYnKhIvY9rzRUOP+tZ9JzCzsNMugQ6/LTvBAyXpMglKEOtjdUiPRgvOIVWQ5fEHQDLC76MaGNEVPlFZO3Y1JrzNhFQT4k78QVa8avzQr/ys98pujSBR5mjZW/ASTpXDg="},{default:e(()=>[$]),_:1}),nn,t(a,{id:"code-demo-190",type:"normal",code:"eJyrVsoqVrJSSivNSy7JzM9TKCjKzCvRyNNRyFSwVTDUUUjJL88DskqKSlM1Fapj8hSAIDNNQSNTwU7BDy4CAkWpJaVFeQoQgVoIhWSaNsg0sDEQqeT8vOL8nFS9nPx0DbAl9grqT9t3qitYgegd6lBl6CakJeYUg4wAWqBUCwDU0jkK"},{default:e(()=>[sn]),_:1}),an])}const cn=p(u,[["render",tn],["__file","003BinaryTree.html.vue"]]);export{cn as default};
