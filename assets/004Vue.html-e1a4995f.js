import{_ as t,o as e,c as p,e as s,b as a,d as n}from"./app-72993491.js";const o={},l=s(`<h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h1><h2 id="vue实现响应式的原理-美图" tabindex="-1"><a class="header-anchor" href="#vue实现响应式的原理-美图" aria-hidden="true">#</a> Vue实现响应式的原理？（美图）</h2><h3 id="响应式的监听" tabindex="-1"><a class="header-anchor" href="#响应式的监听" aria-hidden="true">#</a> 响应式的监听</h3><p>不同于Vue2,Vue3中对于响应式做了升级，Vue2中主要使用Object.defineProperty的api来实现响应式，而Vue3中则主要依赖了ES6新增的Proxy和Reflect来实现响应式。在Vue2中我们使用Object.defineProperty是需要我们初始化时从上而下逐层遍历data中的每一个值的，而Vue3中则不需要这么做，Vue3只需要对最上层的一级进行代理即可，当访问到具体某个属性值时，再进一步的进行代理，这就大大减少了初始化时的开销和内存占用（因为构建依赖需要内存），再考虑到有些属性值可能根本不会访问到，这方面Vue2是没办法观察到的，而Vue3因为其按需构建响应式依赖的模式得以收益。此外Object.defineProperty返回的是对象本身，同时对数组对象API、Map、Set等Api支持并不好，而Proxy则是返回一个新的代理对象，同时能对各种Api的调用进行监听。值得一提的是，Vue2中为了支持数组的各种Api，对这些api都进行了重写，来达到响应式的效果。</p><h3 id="响应式的依赖追踪" tabindex="-1"><a class="header-anchor" href="#响应式的依赖追踪" aria-hidden="true">#</a> 响应式的依赖追踪</h3><p>接下来我们谈一下响应式的依赖追踪，Vue的响应式追踪采用了观察者模式，首先他准备了一个activeEffect的值，记录当前的副作用，然后当Vue发现有值读取的时候，他会建立这个值和当前副作用的依赖，通过这样一种数据结构。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> KeyToDepMap<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> keyToDeps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ReactiveEffect<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 用来收集effect</span>
targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> depsMap<span class="token punctuation">)</span> <span class="token comment">// 值 -&gt; effects</span>
keyToDeps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而Vue第一次收集依赖也就是组件渲染的时候，渲染这个组件的同时，是要读取这个组件上要显示的这些动态值的。完事我接着往下走，上面是依赖的追踪，还有依赖的触发，当我们通过set的时候其实已经被Proxy或者Object.defineProperty捕获到了，这个时候呢会将这些依赖放入副作用队列里，并调用flush函数，flush函数是干嘛的就是执行副作用队列的所有副作用，然后把他们都删除掉，当在执行flush函数的时候不允许你加入新的副作用，flush函数执行完后会触发nextTick钩子，告诉你上次修改数据所产生的的副作用已经修改完了</p><h2 id="watch和watcheffect的区别和关系-你会怎么用-作业帮" tabindex="-1"><a class="header-anchor" href="#watch和watcheffect的区别和关系-你会怎么用-作业帮" aria-hidden="true">#</a> watch和watchEffect的区别和关系，你会怎么用（作业帮）</h2><p>先从调用上说watch支持你传递三个参数，分别是依赖，回调和可选选项配置（包含了深拷贝，是否立即执行，pre、post执行等），watchEffect，则是一个副作用函数，一个选项，然后都返回cleanup清理函数。watch当依赖发生变化时，则会触发回调函数，而watchEffect则是在effect副作用被激活时收集依赖，当这些依赖发生改变时，再次触发执行effect。所以说watch你能够让你明确依赖和回调之间的关系，而watchEffect则让你不再关心依赖与回调的关系。如果让我选，我只会用watch，因为watchEffect可能会导致后续我不知道我要维护哪些关系，给我惹麻烦。再说内部，其实机制是一样的，都是生成副作用,然后通过调度器来手动执行副作用，但同时要在组件上维护一个作用域依赖，以便在销毁组件或者清理的时候清除</p><h2 id="vue-scoped的原理-百度" tabindex="-1"><a class="header-anchor" href="#vue-scoped的原理-百度" aria-hidden="true">#</a> vue-scoped的原理（百度）</h2><p>在Webpack中，通过各种loader，给组件的HTML模板上添加自定义属性，data-v-x以及给组件内的css选择器添加对应的属性选择器<code>[data-v-x]</code>来达到样式隔离的效果。vue-loader通过文件路径和源码生成hash值，使用template-loader来处理html上的属性，template-loader再调用@vue/component-compiler-uitls.compileTemplate函数处理，其实后面就是编译模板，通过词法解析语法解析将其解析成ast，然后transform静态模板与动态模板，generate生成JS函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue-loader/index.js</span>
<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>isProduction <span class="token operator">?</span> <span class="token punctuation">(</span>shortFilePath <span class="token operator">+</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> source<span class="token punctuation">)</span> <span class="token operator">:</span> shortFilePath<span class="token punctuation">)</span>
<span class="token keyword">const</span> hasScoped <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>styles<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>scoped<span class="token punctuation">)</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">? vue&amp;type=template</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>idQuery<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>scopedQuery<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> request <span class="token operator">=</span> templateRequest <span class="token operator">=</span> <span class="token function">stringifyRequest</span><span class="token punctuation">(</span>src <span class="token operator">+</span> query<span class="token punctuation">)</span>
templateImport <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import { render, staticRenderFns } from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>request<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue-loader/templateLoader.js</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceQuery<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> query
<span class="token keyword">const</span> compilerOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>compilerOptions<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">scopeId</span><span class="token operator">:</span> query<span class="token punctuation">.</span>scoped <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">data-v-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">compileTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> compilerOptions <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样式通过stylePostLoader处理，处理逻辑是使用@vue/component-compiler-utils.compileStyle部分,将作用域id加入选择器末尾</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>selectors<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    selector<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;::v-deep&#39;</span> <span class="token operator">||</span> n<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;&gt;&gt;&gt;&#39;</span> <span class="token operator">||</span> n<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;/deep/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    selector<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> selectorParser<span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">attribute</span><span class="token operator">:</span> id
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前处理时如果遇到三种特定情况，选择器会终止循环，停止添加data-v-xxx</p><ol><li>伪类 ::v-deep</li><li>选择器 &gt;&gt;&gt;</li><li>选择器 /deep/</li></ol><h2 id="vue2迁移到vue3" tabindex="-1"><a class="header-anchor" href="#vue2迁移到vue3" aria-hidden="true">#</a> Vue2迁移到Vue3</h2><p>从几个层面上看</p><h3 id="全局api" tabindex="-1"><a class="header-anchor" href="#全局api" aria-hidden="true">#</a> 全局API</h3><ol><li>全局配置通过应用实例去修改</li><li>全局和内部API经过重构,已经支持Tree Shaking</li></ol><h3 id="模板指令" tabindex="-1"><a class="header-anchor" href="#模板指令" aria-hidden="true">#</a> 模板指令</h3><ol><li>v-for和v-if优先级调整,同一层级,v-if优先</li><li>v-model指令重新设计,sync修饰符被废弃</li><li>在v-for中,key值应该被设置在template上,v-if/v-else/v-else-if不再需要key，或者需要唯一key</li><li>v-bind合并行为优先级修改，按顺序，vue2中v-bind总是先执行</li><li>v-on.native被移除</li></ol><h3 id="组件方面" tabindex="-1"><a class="header-anchor" href="#组件方面" aria-hidden="true">#</a> 组件方面</h3><ol><li>函数式组件必须是纯函数</li><li>异步组件使用defineAsyncComponent，隐式改为显示</li><li>任何未在 emits 中声明的事件监听器都会被算入组件的 $attrs，并将默认绑定到组件的根节点上。如果emits没有包含可能会导致事件触发两次</li></ol><h3 id="渲染函数" tabindex="-1"><a class="header-anchor" href="#渲染函数" aria-hidden="true">#</a> 渲染函数</h3>`,27),c=a("ol",null,[a("li",null,"渲染函数h变为全局的，可以从vue中执行引入"),a("li",null,[n("插槽this."),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"s"),a("mi",null,"l"),a("mi",null,"o"),a("mi",null,"t"),a("mi",null,"s"),a("mtext",null,"现在将插槽作为函数公开。非兼容：移除"),a("mi",null,"t"),a("mi",null,"h"),a("mi",null,"i"),a("mi",null,"s"),a("mi",{mathvariant:"normal"},".")]),a("annotation",{encoding:"application/x-tex"},"slots 现在将插槽作为函数公开。非兼容：移除 this.")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"s"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),a("span",{class:"mord mathnormal"},"o"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal"},"s"),a("span",{class:"mord cjk_fallback"},"现在将插槽作为函数公开。非兼容：移除"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal"},"hi"),a("span",{class:"mord mathnormal"},"s"),a("span",{class:"mord"},".")])])]),n("scopedSlots（2.6已修改）")]),a("li",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"l"),a("mi",null,"i"),a("mi",null,"s"),a("mi",null,"t"),a("mi",null,"e"),a("mi",null,"n"),a("mi",null,"e"),a("mi",null,"r"),a("mi",null,"s"),a("mtext",null,"与")]),a("annotation",{encoding:"application/x-tex"},"listeners与")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"s"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal"},"e"),a("span",{class:"mord mathnormal"},"n"),a("span",{class:"mord mathnormal"},"ers"),a("span",{class:"mord cjk_fallback"},"与")])])]),n("attrs合并,没有emit的将合并到$attr中")]),a("li",null,"$attrs中包含class和style")],-1),i=s('<h3 id="自定义元素" tabindex="-1"><a class="header-anchor" href="#自定义元素" aria-hidden="true">#</a> 自定义元素</h3><ol><li>自定义元素，旧使用Vue.config.ignoredElements ，新webpack配置，app.config.compileOptions配置</li><li>is,使用vue:前缀表示vue组件</li></ol><h3 id="移除api" tabindex="-1"><a class="header-anchor" href="#移除api" aria-hidden="true">#</a> 移除API</h3><ol><li>按键修饰符</li><li>事件API $on</li><li>过滤器</li><li>内联模板</li><li>$children</li><li>propsData选项</li></ol><h3 id="其他一些小变化" tabindex="-1"><a class="header-anchor" href="#其他一些小变化" aria-hidden="true">#</a> 其他一些小变化</h3><ol><li>attribute强制行为被移除</li><li>自定义指令钩子变为与现在一致</li><li>data现在只接受函数，mixins和extends只能浅合并</li><li>vue3中被渲染元素作为子元素插入</li><li>生成 prop 默认值的工厂函数不再能访问 this。然后原始prop会传递给他，并且可以在prop中inject</li><li>transition 类名修改</li><li>当使用 <code>&lt;transition&gt;</code> 作为根结点的组件从外部被切换时将不再触发过渡效果。</li><li><code>&lt;transition-group&gt;</code> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素。</li><li>监听组件生命周期使用vue:,而不是hook:</li><li>watch监听数组时，必须用deep否则，只能监听到数组元素本身被替换</li></ol><h2 id="vue运行时都做了什么事-美团" tabindex="-1"><a class="header-anchor" href="#vue运行时都做了什么事-美团" aria-hidden="true">#</a> Vue运行时都做了什么事（美团）</h2><p>初始化app实例的全局配置，创建app实例全局上下文，创建根组件的虚拟节点，渲染根节点，渲染根节点执行render而也就是在执行patch，第一次patch时候，将直接挂载dom并且dom的虚拟节点树，在内部会调用mountComponent方法挂载组件，而在组件的内部又会使用setupComponent的方法，如果setup返回的不是对象而是函数就将该函数作为该组件的渲染函数赋值，如果预构建好了，那就使用预构建的模板的，否则使用compileDOM进行运行时的编译。并且建立好缓存机制，上次该值是从setup里取的还是data里取的还是props里取的，记录清晰，提高性能。建立响应式副作用，并令根组件的副作用域成为该响应式副作用的作用域，创建一个函数包括生命周期钩子的调用及对根组件的patch, 将该函数设置为副作用函数，将该副作用的函数的执行放入任务队列里（该队列为微任务队列）等待执行封装为一个函数放到调度机里，同时先执行一个遍这个函数让程序跑起来。当有数据发生变化时，触发beforeUpdate，然后进行patch，对于children节点的比较，采用diff算法，先比较头尾，头尾没有相同节点，则采用最长递增子序列，尽可能的固定住多的dom节点，减少dom操作。</p>',8),r=[l,c,i];function u(d,k){return e(),p("div",null,r)}const h=t(o,[["render",u],["__file","004Vue.html.vue"]]);export{h as default};
